import random
import string
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func, and_
from ..states.states import RestaurantCreation, MenuItemForm, EditMenuItem, RestaurantSettings
from ..models.base import async_session
from ..models.models import User, Restaurant, MenuItem
from ..keyboards.inline import get_payment_type_kb
from ..keyboards.reply import get_main_menu

router = Router()

def generate_invite_code(length=6):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

def get_restaurant_admin_kb():
    kb = [
        [
            InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_item"),
            InlineKeyboardButton(text="üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", callback_data="manage_menu")
        ],
        [
            InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏", callback_data="manage_clients"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", callback_data="restaurant_settings")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.message(F.text == "üç¥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
async def create_restaurant_start(message: Message, state: FSMContext):
    await handle_restaurant_button(message, state)

@router.message(F.text == "üç¥ –ú–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
async def my_restaurant(message: Message, state: FSMContext):
    await handle_restaurant_button(message, state)

async def handle_restaurant_button(message: Message, state: FSMContext):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            user = User(telegram_id=message.from_user.id)
            session.add(user)
            await session.commit()
            
            # –°—Ä–∞–∑—É –∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            await state.set_state(RestaurantCreation.waiting_for_name)
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω
        try:
            # –û—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            result = await session.execute(
                select(Restaurant).where(Restaurant.owner_id == user.id)
            )
            restaurant = result.scalar_one_or_none()
            
            if restaurant:
                # –ï—Å–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                await message.answer(
                    f"üç¥ –í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name}\n\n"
                    f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {restaurant.invite_code}\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await message.bot.me()).username}?start={restaurant.invite_code}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_restaurant_admin_kb()
                )
                return
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {e}")
    
    # –ï—Å–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    await state.set_state(RestaurantCreation.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:")

@router.message(RestaurantCreation.waiting_for_name)
async def process_restaurant_name(message: Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        # Create restaurant
        invite_code = generate_invite_code()
        restaurant = Restaurant(
            name=message.text,
            owner_id=user.id,
            invite_code=invite_code
        )
        session.add(restaurant)
        
        # Update user
        user.is_restaurant_owner = True
        await session.commit()
    
    await state.clear()
    
    # First send the success message with inline keyboard
    await message.answer(
        f"üéâ –í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω '{message.text}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite_code}\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await message.bot.me()).username}?start={invite_code}\n\n"
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º:",
        reply_markup=get_restaurant_admin_kb()
    )
    
    # Then update the main keyboard to show "My Restaurant" instead of "Create Restaurant"
    await message.answer(
        "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=get_main_menu(user)
    )

@router.callback_query(F.data == "add_item")
async def add_menu_item_start(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    await state.set_state(MenuItemForm.name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):")

@router.callback_query(F.data == "manage_menu")
async def manage_menu(callback: CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user or not user.is_restaurant_owner:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Restaurant).where(Restaurant.owner_id == user.id))
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        result = await session.execute(select(MenuItem).where(MenuItem.restaurant_id == restaurant.id))
        menu_items = result.scalars().all()
        
        if not menu_items:
            kb = [[InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_item")]]
            await callback.message.answer(
                "–í –≤–∞—à–µ–º –º–µ–Ω—é –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        kb = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É)
        for item in menu_items:
            row = [
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è {item.name}",
                    callback_data=f"edit_menu_item:{item.id}"
                ),
                InlineKeyboardButton(
                    text=f"üóëÔ∏è {item.name}",
                    callback_data=f"delete_item:{item.id}"
                )
            ]
            kb.append(row)
        
        kb.append([InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_item")])
        kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_restaurant")])
        
        await callback.message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )

@router.callback_query(F.data == "back_to_restaurant")
async def back_to_restaurant(callback: CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user or not user.is_restaurant_owner:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Restaurant).where(Restaurant.owner_id == user.id))
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
            return
        
        await callback.message.answer(
            f"üç¥ –í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name}\n\n"
            f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {restaurant.invite_code}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await callback.bot.me()).username}?start={restaurant.invite_code}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_restaurant_admin_kb()
        )

@router.callback_query(F.data.startswith("edit_menu_item:"))
async def edit_menu_item(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é"""
    item_id = int(callback.data.split(":")[-1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await callback.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(edit_item_id=item_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        kb = [
            [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field:name:{item_id}")],
            [InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data=f"edit_field:photo:{item_id}")],
            [InlineKeyboardButton(text="üìã –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_field:description:{item_id}")],
            [InlineKeyboardButton(text="‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data=f"edit_field:duration:{item_id}")],
            [InlineKeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"edit_field:price:{item_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_menu")]
        ]
        
        await callback.message.edit_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {item.name}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
        await callback.answer()

@router.callback_query(F.data.startswith("edit_field:"))
async def edit_specific_field(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é"""
    parts = callback.data.split(":")
    field = parts[1]
    item_id = int(parts[2])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await callback.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º –ø–æ–ª–µ
    await state.update_data(edit_field=field, edit_item_id=item_id)
    
    if field == "name":
        await state.set_state(EditMenuItem.waiting_for_name)
        await callback.message.edit_text(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {item.name}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    
    elif field == "photo":
        await state.set_state(EditMenuItem.waiting_for_photo)
        photo_text = "–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ: –µ—Å—Ç—å" if item.photo else "–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        await callback.message.edit_text(
            f"{photo_text}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"remove_photo:{item_id}")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_menu_item:{item_id}")]
            ])
        )
    
    elif field == "description":
        await state.set_state(EditMenuItem.waiting_for_description)
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {item.description or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        )
    
    elif field == "duration":
        await state.set_state(EditMenuItem.waiting_for_duration)
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {item.duration} –º–∏–Ω\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
        )
    
    elif field == "price":
        # –î–ª—è —Ü–µ–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –æ–ø–ª–∞—Ç—ã
        await state.set_state(EditMenuItem.waiting_for_payment_type)
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n"
            f"üíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏: {item.price_kisses or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"ü§ó –û–±–Ω–∏–º–∞—à–∫–∏: {item.price_hugs or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} –º–∏–Ω\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏", callback_data="edit_payment_type:kisses"),
                    InlineKeyboardButton(text="ü§ó –û–±–Ω–∏–º–∞—à–∫–∏", callback_data="edit_payment_type:hugs")
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_menu_item:{item_id}")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("remove_photo:"))
async def remove_photo(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —É –ø–æ–∑–∏—Ü–∏–∏"""
    item_id = int(callback.data.split(":")[-1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await callback.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
        item.photo = None
        await session.commit()
        
        await callback.answer("–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ")
        await edit_menu_item(callback, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é

@router.callback_query(F.data.startswith("edit_payment_type:"))
async def edit_payment_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ü–µ–Ω—ã"""
    payment_type = callback.data.split(":")[-1]
    await state.update_data(edit_payment_type=payment_type)
    
    if payment_type == "kisses":
        await state.set_state(EditMenuItem.waiting_for_price_kisses)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    else:
        await state.set_state(EditMenuItem.waiting_for_price_hugs)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–±–Ω–∏–º–∞—à–µ–∫ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    
    await callback.answer()

@router.message(EditMenuItem.waiting_for_name)
async def process_edit_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    new_name = message.text
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    if not new_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        item.name = new_name
        await session.commit()
        
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.message(EditMenuItem.waiting_for_description)
async def process_edit_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    new_description = message.text
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        item.description = new_description
        await session.commit()
        
        await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.message(EditMenuItem.waiting_for_photo)
async def process_edit_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        item.photo = photo_id
        await session.commit()
        
        await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.message(EditMenuItem.waiting_for_duration)
async def process_edit_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ 0).")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤ - 1440 –º–∏–Ω—É—Ç)
    duration = int(message.text)
    if duration > 1440:
        await message.answer("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 24 —á–∞—Å–∞ (1440 –º–∏–Ω—É—Ç). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        item.duration = duration
        await session.commit()
        
        await message.answer(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {duration} –º–∏–Ω")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.callback_query(F.data.startswith("payment_type:"))
async def process_payment_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_type = callback.data.split(":")[-1]
    await state.update_data(payment_type=payment_type)
    
    if payment_type == "kisses":
        await state.set_state(MenuItemForm.price_kisses)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
    elif payment_type == "hugs":
        await state.set_state(MenuItemForm.price_hugs)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–±–Ω–∏–º–∞—à–µ–∫ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
    else:  # both
        await state.set_state(MenuItemForm.price_kisses)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
    
    await callback.answer()

@router.message(MenuItemForm.price_kisses)
async def process_price_kisses(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤"""
    if not message.text.isdigit() or int(message.text) < 0:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(price_kisses=int(message.text))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã "–æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"
    data = await state.get_data()
    if data.get("payment_type") == "both":
        # –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∏–º–∞—à–µ–∫
        await state.set_state(MenuItemForm.price_hugs)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–±–Ω–∏–º–∞—à–µ–∫ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
        await create_menu_item(message, state)

@router.message(MenuItemForm.price_hugs)
async def process_price_hugs(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω—É—Ç –æ–±–Ω–∏–º–∞—à–µ–∫"""
    if not message.text.isdigit() or int(message.text) < 0:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    hugs_value = int(message.text)
    if hugs_value > 1440:  # 24 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        await message.answer(
            "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 24 —á–∞—Å–∞ (1440 –º–∏–Ω—É—Ç). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–±–Ω–∏–º–∞—à–µ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(price_hugs=hugs_value)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
    await create_menu_item(message, state)

@router.callback_query(F.data == "cancel")
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await callback.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if user and user.is_restaurant_owner:
            await callback.message.answer(
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_restaurant_admin_kb()
            )
    
    await callback.answer()

async def create_menu_item(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Restaurant).where(Restaurant.owner_id == user.id))
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –º–µ–Ω—é
        menu_item = MenuItem(
            restaurant_id=restaurant.id,
            name=data.get("name"),
            photo=data.get("photo_id"),  # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å photo –Ω–∞ photo_id
            description=data.get("description"),
            duration=data.get("duration")
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã
        menu_item.price_kisses = data.get("price_kisses")
        menu_item.price_hugs = data.get("price_hugs")
        
        session.add(menu_item)
        await session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    await state.clear()
    await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è '{data.get('name')}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω—é!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
    await manage_menu_command(message, state)

@router.callback_query(F.data == "restaurant_settings")
async def restaurant_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    await callback.answer()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user or not user.is_restaurant_owner:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Restaurant).where(Restaurant.owner_id == user.id))
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        kb = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_restaurant_name")],
            [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="regenerate_invite_code")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_restaurant")]
        ]
        
        await callback.message.edit_text(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant.name}':\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {restaurant.name}\n"
            f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {restaurant.invite_code}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await callback.bot.me()).username}?start={restaurant.invite_code}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )

@router.callback_query(F.data == "edit_restaurant_name")
async def edit_restaurant_name(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        await state.set_state(RestaurantSettings.waiting_for_new_name)
        await callback.message.answer(
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {restaurant.name}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:"
        )

@router.message(RestaurantSettings.waiting_for_new_name)
async def process_new_restaurant_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    new_name = message.text.strip()
    
    if not new_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
        
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == message.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        old_name = restaurant.name
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        restaurant.name = new_name
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        result = await session.execute(
            select(User).where(User.current_restaurant_id == restaurant.id)
        )
        connected_users = result.scalars().all()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        bot = message.bot
        for user in connected_users:
            try:
                await bot.send_message(
                    user.telegram_id,
                    f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Ä–µ—Å—Ç–æ—Ä–∞–Ω '{old_name}' –∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ '{new_name}'."
                )
            except Exception as e:
                logging.error(f"Failed to notify user {user.telegram_id} about restaurant name change: {e}")
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'!\n"
            f"–í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã ({len(connected_users)}) –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏."
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º
        await message.answer(
            f"üç¥ –í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {new_name}\n\n"
            f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {restaurant.invite_code}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await bot.me()).username}?start={restaurant.invite_code}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_restaurant_admin_kb()
        )

@router.callback_query(F.data == "regenerate_invite_code")
async def regenerate_invite_code(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    await callback.answer()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        new_code = generate_invite_code()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        restaurant.invite_code = new_code
        await session.commit()
        
        await callback.message.edit_text(
            f"‚úÖ –ù–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"üç¥ –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name}\n"
            f"üîë –ù–æ–≤—ã–π –∫–æ–¥: {new_code}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await callback.bot.me()).username}?start={new_code}\n\n"
            f"‚ö†Ô∏è –°—Ç–∞—Ä—ã–π –∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="restaurant_settings")]
            ])
        )

@router.callback_query(F.data == "manage_clients")
async def manage_clients(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å 1
    data = await state.get_data()
    page = data.get("clients_page", 1)
    
    clients_per_page = 5
    offset = (page - 1) * clients_per_page
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        count_query = select(func.count()).select_from(User).where(User.current_restaurant_id == restaurant.id)
        total_clients = await session.scalar(count_query) or 0
        
        if total_clients == 0:
            await callback.message.edit_text(
                f"üë• –ö –≤–∞—à–µ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É '{restaurant.name}' –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n\n"
                f"üîë –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É: {restaurant.invite_code}\n"
                f"üîó –ò–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ: t.me/{(await callback.bot.me()).username}?start={restaurant.invite_code}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_restaurant")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        clients_query = select(User).where(User.current_restaurant_id == restaurant.id).limit(clients_per_page).offset(offset)
        result = await session.execute(clients_query)
        clients = result.scalars().all()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (total_clients + clients_per_page - 1) // clients_per_page
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        text = f"üë• –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant.name}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):\n\n"
        
        for i, client in enumerate(clients, offset + 1):
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            last_activity = client.last_activity.strftime("%d.%m.%Y %H:%M") if client.last_activity else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            joined_at = client.created_at.strftime("%d.%m.%Y") if client.created_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
            try:
                user_info = await callback.bot.get_chat(client.telegram_id)
                username = user_info.username or "–ù–µ—Ç username"
                fullname = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                user_display = f"{fullname}" + (f" (@{username})" if username != "–ù–µ—Ç username" else "")
            except Exception as e:
                logging.error(f"Failed to get user info: {e}")
                user_display = f"ID: {client.telegram_id}"
            
            text += (
                f"{i}. {user_display}\n"
                f"   ID: {client.telegram_id}\n"
                f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n"
                f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {joined_at}\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        kb = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = []
        if page > 1:
            action_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="clients_prev_page"))
        
        if page < total_pages:
            action_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="clients_next_page"))
        
        if action_buttons:
            kb.append(action_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        if clients:
            kb.append([InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="select_client_to_remove")])
        
        kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É", callback_data="back_to_restaurant")])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(clients_page=page)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )

@router.callback_query(F.data == "clients_prev_page")
async def clients_prev_page(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    await callback.answer()
    
    data = await state.get_data()
    current_page = data.get("clients_page", 1)
    
    if current_page > 1:
        await state.update_data(clients_page=current_page - 1)
    
    await manage_clients(callback, state)

@router.callback_query(F.data == "clients_next_page")
async def clients_next_page(callback: CallbackQuery, state: FSMContext):
    """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    await callback.answer()
    
    data = await state.get_data()
    current_page = data.get("clients_page", 1)
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
        count_query = select(func.count()).select_from(User).where(User.current_restaurant_id == restaurant.id)
        total_clients = await session.scalar(count_query) or 0
        
        clients_per_page = 5
        total_pages = (total_clients + clients_per_page - 1) // clients_per_page
        
        if current_page < total_pages:
            await state.update_data(clients_page=current_page + 1)
    
    await manage_clients(callback, state)

@router.callback_query(F.data == "select_client_to_remove")
async def select_client_to_remove(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    await callback.answer()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        result = await session.execute(
            select(User).where(User.current_restaurant_id == restaurant.id)
        )
        clients = result.scalars().all()
        
        if not clients:
            await callback.message.edit_text(
                "–ö –≤–∞—à–µ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_clients")]
                ])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        kb = []
        for client in clients:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
            try:
                user_info = await callback.bot.get_chat(client.telegram_id)
                username = user_info.username or "–ù–µ—Ç username"
                fullname = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                user_display = f"{fullname}" + (f" (@{username})" if username != "–ù–µ—Ç username" else "")
            except Exception as e:
                logging.error(f"Failed to get user info: {e}")
                user_display = f"ID: {client.telegram_id}"
            
            kb.append([
                InlineKeyboardButton(
                    text=f"{user_display}",
                    callback_data=f"remove_client:{client.telegram_id}"
                )
            ])
        
        kb.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manage_clients")])
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )

@router.callback_query(F.data.startswith("remove_client:"))
async def remove_client(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    client_id = int(callback.data.split(":")[-1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        result = await session.execute(
            select(User).where(
                and_(
                    User.telegram_id == client_id,
                    User.current_restaurant_id == restaurant.id
                )
            )
        )
        client = result.scalar_one_or_none()
        
        if not client:
            await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É!")
            return
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        client.current_restaurant_id = None
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            await callback.bot.send_message(
                client_id,
                f"‚ùå –í—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant.name}' –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º."
            )
        except Exception as e:
            logging.error(f"Failed to notify client {client_id} about removal: {e}")
        
        await callback.answer(f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        await manage_clients(callback, state)

@router.message(EditMenuItem.waiting_for_price_kisses)
async def process_edit_price_kisses(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –≤ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞—Ö"""
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    if not message.text.isdigit() or int(message.text) < 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    price = int(message.text)
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        item.price_kisses = price
        await session.commit()
        
        await message.answer(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞—Ö —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.message(EditMenuItem.waiting_for_price_hugs)
async def process_edit_price_hugs(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –≤ –º–∏–Ω—É—Ç–∞—Ö –æ–±–Ω–∏–º–∞—à–µ–∫"""
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    if not message.text.isdigit() or int(message.text) < 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    price = int(message.text)
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        item.price_hugs = price
        await session.commit()
        
        await message.answer(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö –æ–±–Ω–∏–º–∞—à–µ–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.message(MenuItemForm.duration)
async def process_menu_item_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é"""
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ 0):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤ - 1440 –º–∏–Ω—É—Ç)
    duration = int(message.text)
    if duration > 1440:
        await message.answer(
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 24 —á–∞—Å–∞ (1440 –º–∏–Ω—É—Ç). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(duration=duration)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã
    await state.set_state(MenuItemForm.payment_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_type_kb()
    )

@router.callback_query(F.data.startswith("edit_"))
async def process_edit_selection(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ ":" –≤ callback.data
    if ":" in callback.data:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
        action, item_id = callback.data.split(":")[0].split("_")[1], int(callback.data.split(":")[1])
        await state.update_data(edit_item_id=item_id)
        
        # –û—Ç–≤–µ—Ç–∏–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await callback.answer()
        
        if action == "name":
            await state.set_state(MenuItemForm.name)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):")
        elif action == "photo":
            await state.set_state(MenuItemForm.photo)
            await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
        elif action == "description":
            await state.set_state(MenuItemForm.description)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        elif action == "duration":
            await state.set_state(MenuItemForm.duration)
            await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö:")
        elif action == "price":
            await state.set_state(MenuItemForm.payment_type)
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
                reply_markup=get_payment_type_kb()
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–≤–æ–µ—Ç–æ—á–∏—è, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        if callback.data == "edit_restaurant_name":
            # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø—Ä—è–º—É—é
            await edit_restaurant_name(callback, state)

async def manage_menu_command(message: Message, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.clear()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user or not user.is_restaurant_owner:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Restaurant).where(Restaurant.owner_id == user.id))
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        result = await session.execute(select(MenuItem).where(MenuItem.restaurant_id == restaurant.id))
        menu_items = result.scalars().all()
        
        if not menu_items:
            kb = [[InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_item")]]
            await message.answer(
                "–í –≤–∞—à–µ–º –º–µ–Ω—é –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        kb = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É)
        for item in menu_items:
            row = [
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è {item.name}",
                    callback_data=f"edit_menu_item:{item.id}"
                ),
                InlineKeyboardButton(
                    text=f"üóëÔ∏è {item.name}",
                    callback_data=f"delete_item:{item.id}"
                )
            ]
            kb.append(row)
        
        kb.append([InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_item")])
        kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_restaurant")])
        
        await message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
import random
import string
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func, and_
from ..states.states import RestaurantCreation, MenuItemForm, EditMenuItem, RestaurantSettings
from ..models.base import async_session
from ..models.models import User, Restaurant, MenuItem
from ..keyboards.inline import get_payment_type_kb
from ..keyboards.reply import get_main_menu

router = Router()

def generate_invite_code(length=6):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

def get_restaurant_admin_kb():
    kb = [
        [
            InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_item"),
            InlineKeyboardButton(text="üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é", callback_data="manage_menu")
        ],
        [
            InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏", callback_data="manage_clients"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", callback_data="restaurant_settings")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.message(F.text == "üç¥ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
async def create_restaurant_start(message: Message, state: FSMContext):
    await handle_restaurant_button(message, state)

@router.message(F.text == "üç¥ –ú–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
async def my_restaurant(message: Message, state: FSMContext):
    await handle_restaurant_button(message, state)

async def handle_restaurant_button(message: Message, state: FSMContext):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            user = User(telegram_id=message.from_user.id)
            session.add(user)
            await session.commit()
            
            # –°—Ä–∞–∑—É –∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            await state.set_state(RestaurantCreation.waiting_for_name)
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω
        try:
            # –û—Ç–¥–µ–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            result = await session.execute(
                select(Restaurant).where(Restaurant.owner_id == user.id)
            )
            restaurant = result.scalar_one_or_none()
            
            if restaurant:
                # –ï—Å–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                await message.answer(
                    f"üç¥ –í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name}\n\n"
                    f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {restaurant.invite_code}\n"
                    f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await message.bot.me()).username}?start={restaurant.invite_code}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_restaurant_admin_kb()
                )
                return
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {e}")
    
    # –ï—Å–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    await state.set_state(RestaurantCreation.waiting_for_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:")

@router.message(RestaurantCreation.waiting_for_name)
async def process_restaurant_name(message: Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        # Create restaurant
        invite_code = generate_invite_code()
        restaurant = Restaurant(
            name=message.text,
            owner_id=user.id,
            invite_code=invite_code
        )
        session.add(restaurant)
        
        # Update user
        user.is_restaurant_owner = True
        await session.commit()
    
    await state.clear()
    
    # First send the success message with inline keyboard
    await message.answer(
        f"üéâ –í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω '{message.text}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite_code}\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await message.bot.me()).username}?start={invite_code}\n\n"
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º:",
        reply_markup=get_restaurant_admin_kb()
    )
    
    # Then update the main keyboard to show "My Restaurant" instead of "Create Restaurant"
    await message.answer(
        "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=get_main_menu(user)
    )

@router.callback_query(F.data == "add_item")
async def add_menu_item_start(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    await state.set_state(MenuItemForm.name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (–¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤):")

@router.callback_query(F.data == "manage_menu")
async def manage_menu(callback: CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user or not user.is_restaurant_owner:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Restaurant).where(Restaurant.owner_id == user.id))
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        result = await session.execute(select(MenuItem).where(MenuItem.restaurant_id == restaurant.id))
        menu_items = result.scalars().all()
        
        if not menu_items:
            kb = [[InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_item")]]
            await callback.message.answer(
                "–í –≤–∞—à–µ–º –º–µ–Ω—é –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        kb = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥ (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É)
        for item in menu_items:
            row = [
                InlineKeyboardButton(
                    text=f"‚úèÔ∏è {item.name}",
                    callback_data=f"edit_menu_item:{item.id}"
                ),
                InlineKeyboardButton(
                    text=f"üóëÔ∏è {item.name}",
                    callback_data=f"delete_item:{item.id}"
                )
            ]
            kb.append(row)
        
        kb.append([InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="add_item")])
        kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_restaurant")])
        
        await callback.message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )

@router.callback_query(F.data == "back_to_restaurant")
async def back_to_restaurant(callback: CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user or not user.is_restaurant_owner:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Restaurant).where(Restaurant.owner_id == user.id))
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
            return
        
        await callback.message.answer(
            f"üç¥ –í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name}\n\n"
            f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {restaurant.invite_code}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await callback.bot.me()).username}?start={restaurant.invite_code}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_restaurant_admin_kb()
        )

@router.callback_query(F.data.startswith("edit_menu_item:"))
async def edit_menu_item(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é"""
    item_id = int(callback.data.split(":")[-1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await callback.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(edit_item_id=item_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        kb = [
            [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_field:name:{item_id}")],
            [InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data=f"edit_field:photo:{item_id}")],
            [InlineKeyboardButton(text="üìã –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_field:description:{item_id}")],
            [InlineKeyboardButton(text="‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data=f"edit_field:duration:{item_id}")],
            [InlineKeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"edit_field:price:{item_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_menu")]
        ]
        
        await callback.message.edit_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {item.name}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
        await callback.answer()

@router.callback_query(F.data.startswith("edit_field:"))
async def edit_specific_field(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é"""
    parts = callback.data.split(":")
    field = parts[1]
    item_id = int(parts[2])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await callback.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º –ø–æ–ª–µ
    await state.update_data(edit_field=field, edit_item_id=item_id)
    
    if field == "name":
        await state.set_state(EditMenuItem.waiting_for_name)
        await callback.message.edit_text(f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {item.name}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    
    elif field == "photo":
        await state.set_state(EditMenuItem.waiting_for_photo)
        photo_text = "–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ: –µ—Å—Ç—å" if item.photo else "–¢–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        await callback.message.edit_text(
            f"{photo_text}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"remove_photo:{item_id}")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_menu_item:{item_id}")]
            ])
        )
    
    elif field == "description":
        await state.set_state(EditMenuItem.waiting_for_description)
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {item.description or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        )
    
    elif field == "duration":
        await state.set_state(EditMenuItem.waiting_for_duration)
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {item.duration} –º–∏–Ω\n\n"
            f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
        )
    
    elif field == "price":
        # –î–ª—è —Ü–µ–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –æ–ø–ª–∞—Ç—ã
        await state.set_state(EditMenuItem.waiting_for_payment_type)
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n"
            f"üíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏: {item.price_kisses or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"ü§ó –û–±–Ω–∏–º–∞—à–∫–∏: {item.price_hugs or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} –º–∏–Ω\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏", callback_data="edit_payment_type:kisses"),
                    InlineKeyboardButton(text="ü§ó –û–±–Ω–∏–º–∞—à–∫–∏", callback_data="edit_payment_type:hugs")
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"edit_menu_item:{item_id}")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("remove_photo:"))
async def remove_photo(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —É –ø–æ–∑–∏—Ü–∏–∏"""
    item_id = int(callback.data.split(":")[-1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await callback.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
        item.photo = None
        await session.commit()
        
        await callback.answer("–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ")
        await edit_menu_item(callback, state)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é

@router.callback_query(F.data.startswith("edit_payment_type:"))
async def edit_payment_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ü–µ–Ω—ã"""
    payment_type = callback.data.split(":")[-1]
    await state.update_data(edit_payment_type=payment_type)
    
    if payment_type == "kisses":
        await state.set_state(EditMenuItem.waiting_for_price_kisses)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    else:
        await state.set_state(EditMenuItem.waiting_for_price_hugs)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–±–Ω–∏–º–∞—à–µ–∫ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    
    await callback.answer()

@router.message(EditMenuItem.waiting_for_name)
async def process_edit_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    new_name = message.text
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    if not new_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        item.name = new_name
        await session.commit()
        
        await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.message(EditMenuItem.waiting_for_description)
async def process_edit_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    new_description = message.text
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        item.description = new_description
        await session.commit()
        
        await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.message(EditMenuItem.waiting_for_photo)
async def process_edit_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        item.photo = photo_id
        await session.commit()
        
        await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.message(EditMenuItem.waiting_for_duration)
async def process_edit_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ 0).")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤ - 1440 –º–∏–Ω—É—Ç)
    duration = int(message.text)
    if duration > 1440:
        await message.answer("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 24 —á–∞—Å–∞ (1440 –º–∏–Ω—É—Ç). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        item.duration = duration
        await session.commit()
        
        await message.answer(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {duration} –º–∏–Ω")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.callback_query(F.data.startswith("payment_type:"))
async def process_payment_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_type = callback.data.split(":")[-1]
    await state.update_data(payment_type=payment_type)
    
    if payment_type == "kisses":
        await state.set_state(MenuItemForm.price_kisses)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
    elif payment_type == "hugs":
        await state.set_state(MenuItemForm.price_hugs)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–±–Ω–∏–º–∞—à–µ–∫ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
    else:  # both
        await state.set_state(MenuItemForm.price_kisses)
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
    
    await callback.answer()

@router.message(MenuItemForm.price_kisses)
async def process_price_kisses(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤"""
    if not message.text.isdigit() or int(message.text) < 0:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(price_kisses=int(message.text))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã "–æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"
    data = await state.get_data()
    if data.get("payment_type") == "both":
        # –ï—Å–ª–∏ –¥–∞, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–Ω–∏–º–∞—à–µ–∫
        await state.set_state(MenuItemForm.price_hugs)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–±–Ω–∏–º–∞—à–µ–∫ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
        await create_menu_item(message, state)

@router.message(MenuItemForm.price_hugs)
async def process_price_hugs(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω—É—Ç –æ–±–Ω–∏–º–∞—à–µ–∫"""
    if not message.text.isdigit() or int(message.text) < 0:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    hugs_value = int(message.text)
    if hugs_value > 1440:  # 24 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
        await message.answer(
            "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 24 —á–∞—Å–∞ (1440 –º–∏–Ω—É—Ç). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –æ–±–Ω–∏–º–∞—à–µ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(price_hugs=hugs_value)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
    await create_menu_item(message, state)

@router.callback_query(F.data == "cancel")
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()
    await callback.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if user and user.is_restaurant_owner:
            await callback.message.answer(
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_restaurant_admin_kb()
            )
    
    await callback.answer()

async def create_menu_item(message: Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Restaurant).where(Restaurant.owner_id == user.id))
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –º–µ–Ω—é
        menu_item = MenuItem(
            restaurant_id=restaurant.id,
            name=data.get("name"),
            photo=data.get("photo_id"),  # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å photo –Ω–∞ photo_id
            description=data.get("description"),
            duration=data.get("duration")
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã
        menu_item.price_kisses = data.get("price_kisses")
        menu_item.price_hugs = data.get("price_hugs")
        
        session.add(menu_item)
        await session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    await state.clear()
    await message.answer(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è '{data.get('name')}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω—é!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
    await manage_menu_command(message, state)

@router.callback_query(F.data == "restaurant_settings")
async def restaurant_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    await callback.answer()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user or not user.is_restaurant_owner:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(Restaurant).where(Restaurant.owner_id == user.id))
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        kb = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_restaurant_name")],
            [InlineKeyboardButton(text="üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="regenerate_invite_code")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_restaurant")]
        ]
        
        await callback.message.edit_text(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant.name}':\n\n"
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {restaurant.name}\n"
            f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {restaurant.invite_code}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await callback.bot.me()).username}?start={restaurant.invite_code}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )

@router.callback_query(F.data == "edit_restaurant_name")
async def edit_restaurant_name(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        await state.set_state(RestaurantSettings.waiting_for_new_name)
        await callback.message.answer(
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {restaurant.name}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:"
        )

@router.message(RestaurantSettings.waiting_for_new_name)
async def process_new_restaurant_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    new_name = message.text.strip()
    
    if not new_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
        
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == message.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        old_name = restaurant.name
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        restaurant.name = new_name
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        result = await session.execute(
            select(User).where(User.current_restaurant_id == restaurant.id)
        )
        connected_users = result.scalars().all()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        bot = message.bot
        for user in connected_users:
            try:
                await bot.send_message(
                    user.telegram_id,
                    f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Ä–µ—Å—Ç–æ—Ä–∞–Ω '{old_name}' –∏–∑–º–µ–Ω–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ '{new_name}'."
                )
            except Exception as e:
                logging.error(f"Failed to notify user {user.telegram_id} about restaurant name change: {e}")
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'!\n"
            f"–í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã ({len(connected_users)}) –±—ã–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏."
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º
        await message.answer(
            f"üç¥ –í–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {new_name}\n\n"
            f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {restaurant.invite_code}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await bot.me()).username}?start={restaurant.invite_code}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_restaurant_admin_kb()
        )

@router.callback_query(F.data == "regenerate_invite_code")
async def regenerate_invite_code(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    await callback.answer()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        new_code = generate_invite_code()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        restaurant.invite_code = new_code
        await session.commit()
        
        await callback.message.edit_text(
            f"‚úÖ –ù–æ–≤—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"üç¥ –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name}\n"
            f"üîë –ù–æ–≤—ã–π –∫–æ–¥: {new_code}\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: t.me/{(await callback.bot.me()).username}?start={new_code}\n\n"
            f"‚ö†Ô∏è –°—Ç–∞—Ä—ã–π –∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="restaurant_settings")]
            ])
        )

@router.callback_query(F.data == "manage_clients")
async def manage_clients(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å 1
    data = await state.get_data()
    page = data.get("clients_page", 1)
    
    clients_per_page = 5
    offset = (page - 1) * clients_per_page
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        count_query = select(func.count()).select_from(User).where(User.current_restaurant_id == restaurant.id)
        total_clients = await session.scalar(count_query) or 0
        
        if total_clients == 0:
            await callback.message.edit_text(
                f"üë• –ö –≤–∞—à–µ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É '{restaurant.name}' –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n\n"
                f"üîë –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É: {restaurant.invite_code}\n"
                f"üîó –ò–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ: t.me/{(await callback.bot.me()).username}?start={restaurant.invite_code}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_restaurant")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        clients_query = select(User).where(User.current_restaurant_id == restaurant.id).limit(clients_per_page).offset(offset)
        result = await session.execute(clients_query)
        clients = result.scalars().all()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (total_clients + clients_per_page - 1) // clients_per_page
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        text = f"üë• –ö–ª–∏–µ–Ω—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant.name}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):\n\n"
        
        for i, client in enumerate(clients, offset + 1):
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            last_activity = client.last_activity.strftime("%d.%m.%Y %H:%M") if client.last_activity else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            joined_at = client.created_at.strftime("%d.%m.%Y") if client.created_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
            try:
                user_info = await callback.bot.get_chat(client.telegram_id)
                username = user_info.username or "–ù–µ—Ç username"
                fullname = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                user_display = f"{fullname}" + (f" (@{username})" if username != "–ù–µ—Ç username" else "")
            except Exception as e:
                logging.error(f"Failed to get user info: {e}")
                user_display = f"ID: {client.telegram_id}"
            
            text += (
                f"{i}. {user_display}\n"
                f"   ID: {client.telegram_id}\n"
                f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n"
                f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {joined_at}\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        kb = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = []
        if page > 1:
            action_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="clients_prev_page"))
        
        if page < total_pages:
            action_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="clients_next_page"))
        
        if action_buttons:
            kb.append(action_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        if clients:
            kb.append([InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="select_client_to_remove")])
        
        kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É", callback_data="back_to_restaurant")])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(clients_page=page)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )

@router.callback_query(F.data == "clients_prev_page")
async def clients_prev_page(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    await callback.answer()
    
    data = await state.get_data()
    current_page = data.get("clients_page", 1)
    
    if current_page > 1:
        await state.update_data(clients_page=current_page - 1)
    
    await manage_clients(callback, state)

@router.callback_query(F.data == "clients_next_page")
async def clients_next_page(callback: CallbackQuery, state: FSMContext):
    """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    await callback.answer()
    
    data = await state.get_data()
    current_page = data.get("clients_page", 1)
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
        count_query = select(func.count()).select_from(User).where(User.current_restaurant_id == restaurant.id)
        total_clients = await session.scalar(count_query) or 0
        
        clients_per_page = 5
        total_pages = (total_clients + clients_per_page - 1) // clients_per_page
        
        if current_page < total_pages:
            await state.update_data(clients_page=current_page + 1)
    
    await manage_clients(callback, state)

@router.callback_query(F.data == "select_client_to_remove")
async def select_client_to_remove(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    await callback.answer()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.message.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        result = await session.execute(
            select(User).where(User.current_restaurant_id == restaurant.id)
        )
        clients = result.scalars().all()
        
        if not clients:
            await callback.message.edit_text(
                "–ö –≤–∞—à–µ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_clients")]
                ])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        kb = []
        for client in clients:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
            try:
                user_info = await callback.bot.get_chat(client.telegram_id)
                username = user_info.username or "–ù–µ—Ç username"
                fullname = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                user_display = f"{fullname}" + (f" (@{username})" if username != "–ù–µ—Ç username" else "")
            except Exception as e:
                logging.error(f"Failed to get user info: {e}")
                user_display = f"ID: {client.telegram_id}"
            
            kb.append([
                InlineKeyboardButton(
                    text=f"{user_display}",
                    callback_data=f"remove_client:{client.telegram_id}"
                )
            ])
        
        kb.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manage_clients")])
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )

@router.callback_query(F.data.startswith("remove_client:"))
async def remove_client(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    client_id = int(callback.data.split(":")[-1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞
        result = await session.execute(
            select(Restaurant).join(User, Restaurant.owner_id == User.id)
            .where(User.telegram_id == callback.from_user.id)
        )
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        result = await session.execute(
            select(User).where(
                and_(
                    User.telegram_id == client_id,
                    User.current_restaurant_id == restaurant.id
                )
            )
        )
        client = result.scalar_one_or_none()
        
        if not client:
            await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É!")
            return
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        client.current_restaurant_id = None
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            await callback.bot.send_message(
                client_id,
                f"‚ùå –í—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant.name}' –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º."
            )
        except Exception as e:
            logging.error(f"Failed to notify client {client_id} about removal: {e}")
        
        await callback.answer(f"–ö–ª–∏–µ–Ω—Ç —Å ID {client_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        await manage_clients(callback, state)

@router.message(EditMenuItem.waiting_for_price_kisses)
async def process_edit_price_kisses(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –≤ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞—Ö"""
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    if not message.text.isdigit() or int(message.text) < 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    price = int(message.text)
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        item.price_kisses = price
        await session.commit()
        
        await message.answer(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ø–æ—Ü–µ–ª—É–π—á–∏–∫–∞—Ö —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.message(EditMenuItem.waiting_for_price_hugs)
async def process_edit_price_hugs(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –≤ –º–∏–Ω—É—Ç–∞—Ö –æ–±–Ω–∏–º–∞—à–µ–∫"""
    data = await state.get_data()
    item_id = data.get("edit_item_id")
    
    if not message.text.isdigit() or int(message.text) < 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    price = int(message.text)
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ ID
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await message.answer("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        item.price_hugs = price
        await session.commit()
        
        await message.answer(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö –æ–±–Ω–∏–º–∞—à–µ–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ–Ω—é
        await manage_menu_command(message, state)

@router.message(MenuItemForm.duration)
async def process_menu_item_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é"""
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–±–æ–ª—å—à–µ 0):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤ - 1440 –º–∏–Ω—É—Ç)
    duration = int(message.text)
    if duration > 1440:
        await message.answer(
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 24 —á–∞—Å–∞ (1440 –º–∏–Ω—É—Ç). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
            ])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(duration=duration)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã
    await state.set_state(MenuItemForm.payment_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_type_kb()
    )