from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from ..states.states import CustomStarsAmount, DonationComment
from ..keyboards.inline import get_stars_payment_kb
from ..models.base import async_session
from ..models.models import User, Donation
import os

router = Router()

# –ê–¥–º–∏–Ω—Å–∫–∏–π ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.getenv("ADMIN_ID", "5385155120"))

# –°—Å—ã–ª–∫–∞ –Ω–∞ Boosty
BOOSTY_URL = os.getenv("BOOSTY_URL")

def payment_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã"""
    kb = [[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å ‚≠êÔ∏è", pay=True)]]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Boosty, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
    if BOOSTY_URL:
        kb.append([InlineKeyboardButton(text="üî• –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ Boosty", url=BOOSTY_URL)])
    
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.message(F.text == "üåü –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å")
async def support_start(message: Message):
    await message.answer(
        "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –æ–ø–ª–∞—Ç—ã —Ö–æ—Å—Ç–∏–Ω–≥–∞!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞:",
        reply_markup=get_stars_payment_kb()
    )

@router.callback_query(F.data.startswith("stars_payment:"))
async def process_stars_payment(callback: CallbackQuery, state: FSMContext):
    amount = callback.data.split(":")[1]
    
    if amount == "custom":
        await state.set_state(CustomStarsAmount.waiting_for_amount)
        await callback.answer()
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (–æ—Ç 1 –¥–æ 100000):")
        return
    
    amount = int(amount)
    await state.update_data(amount=amount)
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await state.set_state(DonationComment.waiting_for_comment)
    await callback.answer()
    
    kb = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
    await callback.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—é (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )

@router.message(CustomStarsAmount.waiting_for_amount)
async def process_custom_amount(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return
    
    amount = int(message.text)
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É –≤ Telegram
    if amount > 100000:
        await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è - 100000 –∑–≤–µ–∑–¥.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await state.update_data(amount=amount)
    await state.set_state(DonationComment.waiting_for_comment)
    
    kb = [[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—é (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )

@router.callback_query(F.data == "skip_comment")
async def skip_comment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    amount = data.get("amount", 0)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.update_data(comment=None)
    await state.clear()
    await send_invoice(callback.message, amount)
    await callback.answer()

@router.message(DonationComment.waiting_for_comment)
async def process_donation_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    amount = data.get("amount", 0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await state.update_data(comment=message.text)
    comment = message.text
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    await send_invoice(message, amount, comment)

async def send_invoice(message: Message, amount: int, comment: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Stars"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –≤–∞–ª–∏–¥–Ω–∞—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        if amount <= 0 or amount > 100000:
            await message.answer("–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100000 –∑–≤–µ–∑–¥.")
            return
            
        prices = [LabeledPrice(label="XTR", amount=amount)]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ payload, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        payload = f"donation_{amount}"
        if comment:
            # –õ–∏–º–∏—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è payload (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç)
            short_comment = comment[:50] + "..." if len(comment) > 50 else comment
            payload = f"donation_{amount}_{short_comment}"
        
        await message.answer_invoice(
            title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Love Restaurant",
            description=f"–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ {amount} –∑–≤–µ–∑–¥",
            prices=prices,
            provider_token="",  # –î–ª—è Telegram Stars –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            payload=payload,
            currency="XTR",
            reply_markup=payment_keyboard(),
            provider_data='{"customTitle": "–ü–û–î–î–ï–†–ñ–ê–¢–¨"}'  # JSON —Å—Ç—Ä–æ–∫–∞, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
        )
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}"
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø—Ä–æ–±–ª–µ–º–µ
        bot = message.bot
        admin_error_msg = (
            f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞!\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (ID: {message.from_user.id})\n"
            f"–°—É–º–º–∞: {amount}\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        
        try:
            await bot.send_message(ADMIN_ID, admin_error_msg)
        except Exception as admin_error:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin_error}")

@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def success_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    amount = payment.total_amount
    payload = payment.invoice_payload
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ payload, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    comment = None
    if "_" in payload and len(payload.split("_")) > 2:
        parts = payload.split("_")
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —á–∞—Å—Ç–∏ (donation –∏ amount)
        comment = "_".join(parts[2:])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í–∞—à–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç –µ—â–µ –ª—É—á—à–µ."
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–∏ –≤ –ë–î
    try:
        async with async_session() as session:
            result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            user = result.scalar_one_or_none()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if not user:
                user = User(telegram_id=message.from_user.id)
                session.add(user)
                await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            donation = Donation(
                user_id=user.id,
                amount=amount,
                comment=comment
            )
            session.add(donation)
            await session.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –ë–î
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = f"{message.from_user.full_name}"
    if message.from_user.username:
        user_info += f" (@{message.from_user.username})"
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
    user_profile_link = f"tg://user?id={message.from_user.id}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = (
        f"üåü –ù–æ–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ!\n\n"
        f"–û—Ç: {user_info}\n"
        f"ID: {message.from_user.id}\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å: [–û—Ç–∫—Ä—ã—Ç—å]({user_profile_link})\n"
        f"–°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥\n"
    )
    
    if comment:
        admin_message += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
        
    admin_message += f"–ü–ª–∞—Ç–µ–∂ ID: {payment.telegram_payment_charge_id}"
    
    try:
        bot = message.bot
        await bot.send_message(ADMIN_ID, admin_message, parse_mode="Markdown", disable_web_page_preview=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

@router.message(Command("paysupport"))
async def pay_support_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /paysupport –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤"""
    await message.answer(
        "–î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, "
        "–æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∏–ª–∏ "
        "—Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )

@router.message(Command("donate"))
async def donate_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /donate –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è"""
    await support_start(message) 