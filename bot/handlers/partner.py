from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import InputMediaPhoto
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from ..states.states import RestaurantEntry
from ..models.base import async_session
from ..models.models import User, Restaurant, MenuItem, Order, OrderItem
from ..keyboards.inline import get_menu_items_kb
from ..keyboards.reply import get_main_menu
import os
import logging
import datetime

router = Router()

def create_menu_keyboard(menu_items, with_cart=True):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –º–µ–Ω—é –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞.
    
    –î–ª—è —á–µ—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π - –≤—Å–µ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞.
    –î–ª—è –Ω–µ—á–µ—Ç–Ω–æ–≥–æ - –≤—Å–µ –ø–∞—Ä—ã –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞, –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç —Ü–µ–ª—É—é —Å—Ç—Ä–æ–∫—É.
    """
    kb = []
    menu_items_count = len(menu_items)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –ø–∞—Ä–∞–º, –¥–ª—è –Ω–µ—á–µ—Ç–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    pairs_count = menu_items_count // 2
    has_odd_item = menu_items_count % 2 != 0
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∫–Ω–æ–ø–æ–∫
    for i in range(pairs_count):
        item1 = menu_items[i*2]
        item2 = menu_items[i*2 + 1]
        
        kb.append([
            InlineKeyboardButton(text=item1.name, callback_data=f"view_item:{item1.id}"),
            InlineKeyboardButton(text=item2.name, callback_data=f"view_item:{item2.id}")
        ])
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—á–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    if has_odd_item:
        last_item = menu_items[-1]
        kb.append([InlineKeyboardButton(text=last_item.name, callback_data=f"view_item:{last_item.id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏ –≤—ã—Ö–æ–¥–∞
    if with_cart:
        kb.append([InlineKeyboardButton(text="üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")])
    kb.append([InlineKeyboardButton(text="üëã –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="leave_restaurant")])
    
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.message(F.text == "üîë –í–æ–π—Ç–∏ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
async def enter_restaurant_start(message: Message, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        
        if user and user.current_restaurant_id:
            result = await session.execute(select(Restaurant).where(Restaurant.id == user.current_restaurant_id))
            restaurant = result.scalar_one_or_none()
            
            # –¢–µ–ø–µ—Ä—å —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            result = await session.execute(select(MenuItem).where(MenuItem.restaurant_id == restaurant.id))
            menu_items = result.scalars().all()
            
            if not menu_items:
                kb = [[InlineKeyboardButton(text="üëã –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="leave_restaurant")]]
                await message.answer(
                    f"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É '{restaurant.name}', –Ω–æ –º–µ–Ω—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ üòî",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
                )
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
            kb = create_menu_keyboard(menu_items)
            
            await message.answer(
                f"–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É '{restaurant.name}'.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                reply_markup=kb
            )
            return
    
    await state.set_state(RestaurantEntry.waiting_for_code)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é:"
    )

@router.message(Command("start"))
async def start_with_code(message: Message):
    args = message.text.split()
    if len(args) != 2:
        return
    
    invite_code = args[1].upper()
    await process_restaurant_code(message, invite_code)

@router.message(RestaurantEntry.waiting_for_code)
async def process_restaurant_code_message(message: Message, state: FSMContext):
    await state.clear()
    await process_restaurant_code(message, message.text.upper())

async def process_restaurant_code(message: Message, invite_code: str):
    try:
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –∏ –≤–∞–ª–∏–¥–Ω–∞
            if session.is_active:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
                user = result.scalar_one_or_none()
                
                if not user:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                    user = User(telegram_id=message.from_user.id)
                    session.add(user)
                    await session.commit()
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                    result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
                    user = result.scalar_one_or_none()
                
                if user.current_restaurant_id:
                    result = await session.execute(select(Restaurant).where(Restaurant.id == user.current_restaurant_id))
                    restaurant = result.scalar_one_or_none()
                    
                    kb = [
                        [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é", callback_data="show_menu")],
                        [InlineKeyboardButton(text="üëã –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="leave_restaurant")]
                    ]
                    await message.answer(
                        f"–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É '{restaurant.name}'.\n\n"
                        "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ—Å—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
                    )
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                result = await session.execute(select(Restaurant).where(Restaurant.invite_code == invite_code))
                restaurant = result.scalar_one_or_none()
                
                if not restaurant:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                result = await session.execute(select(User).where(User.id == restaurant.owner_id))
                owner = result.scalar_one_or_none()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.current_restaurant_id = restaurant.id
                await session.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –æ –Ω–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ
                if owner:
                    try:
                        username = message.from_user.username or "–ù–µ—Ç username"
                        user_link = f"@{username}" if username != "–ù–µ—Ç username" else f"ID: {message.from_user.id}"
                        
                        await message.bot.send_message(
                            owner.telegram_id,
                            f"üîî –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤–∞—à–µ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É '{restaurant.name}'!\n\n"
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} ({user_link})"
                        )
                    except Exception as e:
                        logging.error(f"Failed to send notification to restaurant owner: {e}")
                
                # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –∫–æ–º–º–∏—Ç–∞ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                async with async_session() as new_session:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å –º–µ–Ω—é
                    result = await new_session.execute(
                        select(Restaurant).where(Restaurant.id == restaurant.id)
                    )
                    updated_restaurant = result.scalar_one_or_none()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –Ω–∞–ø—Ä—è–º—É—é
                    result = await new_session.execute(
                        select(MenuItem).where(MenuItem.restaurant_id == restaurant.id)
                    )
                    menu_items = result.scalars().all()
                    
                    if not menu_items:
                        kb = [[InlineKeyboardButton(text="üëã –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="leave_restaurant")]]
                        await message.answer(
                            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É '{restaurant.name}'!\n"
                            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ–Ω—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ üòî",
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
                        )
                        return
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
                    kb = create_menu_keyboard(menu_items)
                    
                    await message.answer(
                        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω '{restaurant.name}'!\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –º–µ–Ω—é:",
                        reply_markup=kb
                    )
            else:
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
                logging.error("SQLAlchemy session is not active")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logging.error(f"Error in process_restaurant_code: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data == "show_menu")
async def show_restaurant_menu(callback: CallbackQuery):
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ select –≤–º–µ—Å—Ç–æ get —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user or not user.current_restaurant_id:
            await callback.answer("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ –µ–≥–æ ID
        result = await session.execute(select(Restaurant).where(Restaurant.id == user.current_restaurant_id))
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
        result = await session.execute(select(MenuItem).where(MenuItem.restaurant_id == restaurant.id))
        menu_items = result.scalars().all()
        
        if not menu_items:
            await callback.answer("–í –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π!")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
        kb = create_menu_keyboard(menu_items)
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
        except Exception as e:
            logging.error(f"Error deleting previous message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        try:
            await callback.message.answer(
                f"–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant.name}':\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
                reply_markup=kb
            )
        except Exception as e:
            logging.error(f"Error sending new message: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text=f"–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant.name}':\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
                reply_markup=kb
            )
        
        await callback.answer()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
async def show_restaurant_menu(callback: CallbackQuery, restaurant_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ –µ–≥–æ ID (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)"""
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ ID
        result = await session.execute(select(Restaurant).where(Restaurant.id == restaurant_id))
        restaurant = result.scalar_one_or_none()
        
        if not restaurant:
            await callback.answer("–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
        result = await session.execute(select(MenuItem).where(MenuItem.restaurant_id == restaurant.id))
        menu_items = result.scalars().all()
        
        if not menu_items:
            await callback.answer("–í –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π!")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é
        kb = create_menu_keyboard(menu_items)
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
        except Exception as e:
            logging.error(f"Error deleting previous message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        try:
            await callback.message.answer(
                f"–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant.name}':\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
                reply_markup=kb
            )
        except Exception as e:
            logging.error(f"Error sending new message: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text=f"–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant.name}':\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
                reply_markup=kb
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ ID
@router.callback_query(F.data.startswith("show_restaurant_menu:"))
async def show_restaurant_menu_by_id(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ ID"""
    restaurant_id = int(callback.data.split(":")[1])
    await show_restaurant_menu(callback, restaurant_id=restaurant_id)

@router.callback_query(F.data == "leave_restaurant")
async def leave_restaurant(callback: CallbackQuery):
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ select –≤–º–µ—Å—Ç–æ get —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        user = result.scalar_one_or_none()
        
        if not user or not user.current_restaurant_id:
            await callback.answer("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –Ω–∏ –∫ –æ–¥–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        result = await session.execute(select(Restaurant).where(Restaurant.id == user.current_restaurant_id))
        restaurant = result.scalar_one_or_none()
        
        if restaurant:
            # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            result = await session.execute(select(User).where(User.id == restaurant.owner_id))
            owner = result.scalar_one_or_none()
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
            user.current_restaurant_id = None
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –æ —Ç–æ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è
            if owner:
                try:
                    username = callback.from_user.username or "–ù–µ—Ç username"
                    user_link = f"@{username}" if username != "–ù–µ—Ç username" else f"ID: {callback.from_user.id}"
                    
                    await callback.bot.send_message(
                        owner.telegram_id,
                        f"üëã –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ '{restaurant.name}'.\n\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name} ({user_link})"
                    )
                except Exception as e:
                    logging.error(f"Failed to notify restaurant owner about client leaving: {e}")
        else:
            # –ï—Å–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.current_restaurant_id = None
            await session.commit()
        
        await callback.message.edit_text("üëã –í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞!")
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu(user)
        )

@router.callback_query(F.data.startswith("view_item:"))
async def view_menu_item(callback: CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç
    data = await state.get_data()
    current_viewed_item = data.get("current_viewed_item")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ –≤—ã—Ö–æ–¥–∏–º
    if current_viewed_item == item_id:
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    await state.update_data(current_viewed_item=item_id)
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –º–µ–Ω—é
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await callback.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        result = await session.execute(select(MenuItem).where(MenuItem.restaurant_id == item.restaurant_id))
        menu_items = result.scalars().all()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∑–∏—Ü–∏–∏
        price_info = []
        if item.price_kisses:
            price_info.append(f"üíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏: {item.price_kisses}")
        if item.price_hugs:
            price_info.append(f"ü§ó –û–±–Ω–∏–º–∞—à–∫–∏: {item.price_hugs} –º–∏–Ω")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—ã–≤–æ–¥–∞ "None"
        description_text = item.description if item.description else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        
        item_text = (
            f"üìã {item.name}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description_text}\n\n"
            f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {item.duration} –º–∏–Ω\n"
            f"{' | '.join(price_info)}"
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        kb = []
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É –°–í–ï–†–•–£
        kb.append([InlineKeyboardButton(
            text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"add_to_cart:{item.id}"
        )])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        menu_items_count = len(menu_items)
        pairs_count = menu_items_count // 2
        has_odd_item = menu_items_count % 2 != 0
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∫–Ω–æ–ø–æ–∫
        for i in range(pairs_count):
            item1 = menu_items[i*2]
            item2 = menu_items[i*2 + 1]
            
            kb.append([
                InlineKeyboardButton(text=item1.name, callback_data=f"view_item:{item1.id}"),
                InlineKeyboardButton(text=item2.name, callback_data=f"view_item:{item2.id}")
            ])
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—á–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        if has_odd_item:
            last_item = menu_items[-1]
            kb.append([InlineKeyboardButton(text=last_item.name, callback_data=f"view_item:{last_item.id}")])
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤–Ω–∏–∑—É
        kb.append([InlineKeyboardButton(text="üõçÔ∏è –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")])
        kb.append([InlineKeyboardButton(text="üëã –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", callback_data="leave_restaurant")])
        
        markup = InlineKeyboardMarkup(inline_keyboard=kb)
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ
        try:
            # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
        except Exception as e:
            logging.error(f"Error deleting previous message: {e}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        try:
            if item.photo:
                await callback.message.answer_photo(
                    photo=item.photo,
                    caption=item_text,
                    reply_markup=markup
                )
            else:
                await callback.message.answer(
                    item_text,
                    reply_markup=markup
                )
        except Exception as e:
            logging.error(f"Error sending new message: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            if item.photo:
                await callback.bot.send_photo(
                    chat_id=callback.from_user.id,
                    photo=item.photo,
                    caption=item_text,
                    reply_markup=markup
                )
            else:
                await callback.bot.send_message(
                    chat_id=callback.from_user.id,
                    text=item_text,
                    reply_markup=markup
                )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        await callback.answer()

@router.callback_query(F.data.startswith("add_to_cart:"))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    item_id = int(callback.data.split(":")[1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –º–µ–Ω—é
        result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
        item = result.scalar_one_or_none()
        
        if not item:
            await callback.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        data = await state.get_data()
        cart = data.get("cart", [])
        cart.append(item_id)
        await state.update_data(cart=cart)
        
        await callback.answer(f"‚úÖ {item.name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")

@router.callback_query(F.data == "view_cart")
async def view_cart(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã"""
    logging.info(f"view_cart handler called, user_id: {callback.from_user.id}")
    data = await state.get_data()
    cart = data.get("cart", [])
    logging.info(f"Cart contents: {cart}")
    
    if not cart:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
        logging.info("Cart is empty, returning")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    item_counts = {}
    for item_id in cart:
        item_counts[item_id] = item_counts.get(item_id, 0) + 1
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        items = []
        total_kisses = 0
        total_hugs = 0
        total_duration = 0
        
        for item_id, count in item_counts.items():
            result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
            item = result.scalar_one_or_none()
            logging.info(f"Retrieved item {item_id}: {item}")
            
            if item:
                # –£–º–Ω–æ–∂–∞–µ–º —Ü–µ–Ω—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                item_kisses = (item.price_kisses or 0) * count
                item_hugs = (item.price_hugs or 0) * count
                item_duration = (item.duration or 0) * count
                
                items.append({
                    "id": item.id,
                    "name": item.name,
                    "count": count,
                    "kisses": item_kisses,
                    "hugs": item_hugs,
                    "duration": item_duration
                })
                
                total_kisses += item_kisses
                total_hugs += item_hugs
                total_duration += item_duration
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
        cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        for i, item in enumerate(items, 1):
            cart_text += f"{i}. {item['name']} x{item['count']}"
            price_info = []
            if item['kisses']:
                price_info.append(f"üíã{item['kisses']}")
            if item['hugs']:
                price_info.append(f"ü§ó{item['hugs']}")
            
            if price_info:
                cart_text += f" ({' + '.join(price_info)})"
            cart_text += "\n"
        
        cart_text += "\n"
        if total_kisses:
            cart_text += f"üíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏: {total_kisses}\n"
        if total_hugs:
            cart_text += f"ü§ó –û–±–Ω–∏–º–∞—à–∫–∏: {total_hugs} –º–∏–Ω\n"
        if total_duration:
            cart_text += f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration} –º–∏–Ω\n"
        
        logging.info(f"Cart text: {cart_text}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = [
            [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data=f"show_restaurant_menu:{data.get('current_restaurant_id')}")],
        ]
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
        except Exception as e:
            logging.error(f"Error deleting previous message: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
        try:
            await callback.message.answer(
                cart_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
            )
        except Exception as e:
            logging.error(f"Error sending new message: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            await callback.bot.send_message(
                chat_id=callback.from_user.id,
                text=cart_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
            )
        
        await callback.answer()

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    await state.update_data(cart=[])
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    data = await state.get_data()
    restaurant_id = data.get("current_restaurant_id")
    if restaurant_id:
        await show_restaurant_menu(callback, restaurant_id=restaurant_id)
    else:
        await callback.message.edit_text(
            "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")]
            ])
        )

@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", [])
    
    if not cart:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ select
        items = []
        restaurant = None
        owner = None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∑–∞–∫–∞–∑
        result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
        customer = result.scalar_one_or_none()
        
        if not customer:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–∑–∏–Ω–µ
        item_counts = {}
        for item_id in cart:
            item_counts[item_id] = item_counts.get(item_id, 0) + 1
            
        menu_items = {}
        for item_id in item_counts:
            result = await session.execute(select(MenuItem).where(MenuItem.id == item_id))
            item = result.scalar_one_or_none()
            if item:
                menu_items[item_id] = item
                items.append(item)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                if not restaurant:
                    result = await session.execute(select(Restaurant).where(Restaurant.id == item.restaurant_id))
                    restaurant = result.scalar_one_or_none()
                    
                    if restaurant:
                        result = await session.execute(select(User).where(User.id == restaurant.owner_id))
                        owner = result.scalar_one_or_none()
        
        if not items or not restaurant or not owner:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞!")
            return
        
        # Calculate totals
        total_kisses = 0
        total_hugs = 0
        total_duration = 0
        
        for item_id, count in item_counts.items():
            if item_id in menu_items:
                item = menu_items[item_id]
                total_kisses += (item.price_kisses or 0) * count
                total_hugs += (item.price_hugs or 0) * count
                total_duration += (item.duration or 0) * count
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            new_order = Order(
                user_id=customer.id,
                restaurant_id=restaurant.id,
                status="pending",
                total_kisses=total_kisses,
                total_hugs=total_hugs,
                total_duration=total_duration
            )
            session.add(new_order)
            await session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫–∞–∑–∞
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
            for item_id, count in item_counts.items():
                if item_id in menu_items:
                    item = menu_items[item_id]
                    order_item = OrderItem(
                        order_id=new_order.id,
                        menu_item_id=item_id,
                        quantity=count,
                        price_kisses=item.price_kisses,
                        price_hugs=item.price_hugs
                    )
                    session.add(order_item)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            
            # –î–ª—è –∫–æ–ª–±—ç–∫–∞ order_ready –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            order_id = new_order.id
            logging.info(f"Order created in database with ID: {order_id}")
        except Exception as e:
            logging.error(f"Error creating order in database: {e}")
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ
            import time
            order_id = f"order_{int(time.time())}_{callback.from_user.id}"
            await session.rollback()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(last_order_id=order_id)
        
        # Send order to restaurant owner
        owner_kb = [[InlineKeyboardButton(
            text="‚úÖ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤", 
            callback_data=f"order_ready:{order_id}:{callback.from_user.id}"
        )]]
        
        order_text = (
            f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"–û—Ç: {callback.from_user.full_name} (ID: {callback.from_user.id})\n\n"
            f"–ü–æ–∑–∏—Ü–∏–∏:\n"
        )
        
        for item_id, count in item_counts.items():
            if item_id in menu_items:
                item = menu_items[item_id]
                order_text += f"- {item.name} x{count}\n"
                
        order_text += (
            f"\n–ò—Ç–æ–≥–æ:\n"
            f"üíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏: {total_kisses}\n"
            f"ü§ó –û–±–Ω–∏–º–∞—à–∫–∏: {total_hugs} –º–∏–Ω\n"
            f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration} –º–∏–Ω"
        )
        
        await callback.bot.send_message(
            owner.telegram_id, 
            order_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=owner_kb)
        )
        
        # Clear cart and notify customer
        await state.update_data(cart=[])
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
            f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name}\n\n"
            f"–ò—Ç–æ–≥–æ:\n"
            f"üíã –ü–æ—Ü–µ–ª—É–π—á–∏–∫–∏: {total_kisses}\n"
            f"ü§ó –û–±–Ω–∏–º–∞—à–∫–∏: {total_hugs} –º–∏–Ω\n"
            f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration} –º–∏–Ω\n\n"
            f"–í–ª–∞–¥–µ–ª–µ—Ü —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤."
        )

@router.callback_query(F.data.startswith("order_ready:"))
async def order_ready(callback: CallbackQuery):
    parts = callback.data.split(":")
    if len(parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞!")
        return
        
    order_id = parts[1]
    customer_id = int(parts[2])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞)
            result = await session.execute(select(User).where(User.telegram_id == callback.from_user.id))
            owner = result.scalar_one_or_none()
            
            if not owner:
                await callback.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω
            result = await session.execute(select(Restaurant).where(Restaurant.owner_id == owner.id))
            restaurant = result.scalar_one_or_none()
            
            if not restaurant:
                await callback.answer("–û—à–∏–±–∫–∞: —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å order_id –∫–∞–∫ —á–∏—Å–ª–æ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
                order_db_id = int(order_id)
                result = await session.execute(select(Order).where(Order.id == order_db_id))
                order = result.scalar_one_or_none()
                
                if order:
                    order.status = "completed"
                    order.completed_at = datetime.datetime.utcnow()
                    await session.commit()
                    logging.info(f"Order {order_db_id} marked as completed")
            except (ValueError, TypeError) as e:
                # –ï—Å–ª–∏ order_id –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ Order
                logging.warning(f"Could not update order status in DB: {e}")
                
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await callback.bot.send_message(
            customer_id,
            f"üéâ –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!\n\n"
            f"–†–µ—Å—Ç–æ—Ä–∞–Ω '{restaurant.name}' –∂–¥–µ—Ç –≤–∞—Å –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        await callback.message.edit_text(
            f"{callback.message.text}\n\n"
            f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞."
        )
        
        await callback.answer("–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            admin_id = int(os.getenv("ADMIN_ID", "5385155120"))
            await callback.bot.send_message(
                admin_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤'!\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n"
                f"–î–∞–Ω–Ω—ã–µ: order_id={order_id}, customer_id={customer_id}"
            )
        except Exception:
            pass
            
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.") 