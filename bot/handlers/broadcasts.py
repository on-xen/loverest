import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func, desc, and_
from ..models.base import async_session
from ..models.models import User, Broadcast, BroadcastRecipient
from ..states.states import BroadcastForm
import os
import asyncio
import re

router = Router()

# –ê–¥–º–∏–Ω—Å–∫–∏–π ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.getenv("ADMIN_ID", "5385155120"))

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(telegram_id):
    return telegram_id == ADMIN_ID

# –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫
def get_broadcasts_menu_kb():
    kb = [
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_broadcast")],
        [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="active_broadcasts")],
        [InlineKeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="broadcast_history")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.callback_query(F.data == "admin_broadcasts")
async def admin_broadcasts_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∞–º
        total_broadcasts = await session.scalar(select(func.count()).select_from(Broadcast))
        active_broadcasts = await session.scalar(
            select(func.count()).select_from(Broadcast).where(
                Broadcast.status.in_(["created", "sending"])
            )
        )
        scheduled_broadcasts = await session.scalar(
            select(func.count()).select_from(Broadcast).where(
                and_(
                    Broadcast.status == "created",
                    Broadcast.scheduled_at.isnot(None)
                )
            )
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        recent_broadcasts_query = select(Broadcast).order_by(desc(Broadcast.created_at)).limit(3)
        result = await session.execute(recent_broadcasts_query)
        recent_broadcasts = result.scalars().all()
        
        text = (
            "üì® –†–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            f"–í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {total_broadcasts}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {active_broadcasts}\n"
            f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {scheduled_broadcasts}\n\n"
        )
        
        if recent_broadcasts:
            text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
            for i, broadcast in enumerate(recent_broadcasts, 1):
                status_emoji = {
                    "created": "‚è≥",
                    "sending": "üîÑ",
                    "completed": "‚úÖ",
                    "failed": "‚ùå"
                }.get(broadcast.status, "‚ùì")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
                text += (
                    f"{i}. {status_emoji} {broadcast.name}\n"
                    f"   –°—Ç–∞—Ç—É—Å: {broadcast.status}\n"
                    f"   –°–æ–∑–¥–∞–Ω–∞: {broadcast.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                )
                
                if broadcast.scheduled_at:
                    text += f"   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞: {broadcast.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
                    
                if broadcast.sent_at:
                    text += f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {broadcast.sent_at.strftime('%d.%m.%Y %H:%M')}\n"
                    
                if broadcast.status in ["completed", "sending"]:                        
                    text += (
                        f"   –ü–æ–ª—É—á–∏–ª–∏: {broadcast.received_count}/{broadcast.total_users}\n"
                    )
                
                text += "\n"
        else:
            text += "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫\n"
        
        try:
            await callback.message.edit_text(text, reply_markup=get_broadcasts_menu_kb())
        except Exception as e:
            logging.error(f"Error editing message in admin_broadcasts_menu: {e}")
            await callback.message.answer(text, reply_markup=get_broadcasts_menu_kb())
            
        await callback.answer()

@router.callback_query(F.data == "create_broadcast")
async def create_broadcast_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    await state.set_state(BroadcastForm.waiting_for_name)
    
    try:
        await callback.message.edit_text(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å, –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
            ])
        )
    except Exception as e:
        logging.error(f"Error editing message in create_broadcast_start: {e}")
        await callback.message.answer(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å, –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
            ])
        )
    
    await callback.answer() 

@router.message(BroadcastForm.waiting_for_name)
async def process_broadcast_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    broadcast_name = message.text.strip()
    
    if not broadcast_name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(name=broadcast_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(BroadcastForm.waiting_for_text)
    
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É:\n"
        "- <b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n"
        "- <i>–ö—É—Ä—Å–∏–≤</i>\n"
        "- <u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>\n"
        "- <a href='https://example.com'>–°—Å—ã–ª–∫–∞</a>\n",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
        ])
    )

@router.message(BroadcastForm.waiting_for_text)
async def process_broadcast_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    broadcast_text = message.text.strip()
    
    if not broadcast_text:
        await message.answer("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(text=broadcast_text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –≤—ã–±–æ—Ä—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
    await state.set_state(BroadcastForm.waiting_for_photo)
    
    await message.answer(
        "üñº –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_broadcast_photo")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
        ])
    )

@router.message(BroadcastForm.waiting_for_photo, F.photo)
async def process_broadcast_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(photo=photo_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    await state.set_state(BroadcastForm.waiting_for_button)
    
    await message.answer(
        "üîò –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π?\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_broadcast_button")],
            [InlineKeyboardButton(text="‚û°Ô∏è –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_broadcast_button")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
        ])
    )

@router.callback_query(F.data == "skip_broadcast_photo")
async def skip_broadcast_photo(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ç–æ
    await state.update_data(photo=None)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    await state.set_state(BroadcastForm.waiting_for_button)
    
    await callback.message.edit_text(
        "üîò –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π?\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Å–∏—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_broadcast_button")],
            [InlineKeyboardButton(text="‚û°Ô∏è –ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_broadcast_button")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
        ])
    )
    
    await callback.answer()

@router.callback_query(F.data == "add_broadcast_button")
async def add_broadcast_button(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    await state.set_state(BroadcastForm.waiting_for_button_text)
    
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', '–ü–µ—Ä–µ–π—Ç–∏' –∏ —Ç.–¥.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
        ])
    )
    
    await callback.answer()

@router.message(BroadcastForm.waiting_for_button_text)
async def process_button_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    button_text = message.text.strip()
    
    if not button_text:
        await message.answer("–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    await state.update_data(button_text=button_text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É URL –¥–ª—è –∫–Ω–æ–ø–∫–∏
    await state.set_state(BroadcastForm.waiting_for_button_url)
    
    await message.answer(
        "üîó –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:\n\n"
        "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
        ])
    )

@router.message(BroadcastForm.waiting_for_button_url)
async def process_button_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∫–Ω–æ–ø–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    button_url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL
    if not button_url.startswith(('http://', 'https://')):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL. URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–Ω–æ–ø–∫–∏
    await state.update_data(button_url=button_url)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏
    await show_broadcast_preview(message, state)

@router.callback_query(F.data == "skip_broadcast_button")
async def skip_broadcast_button(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∏
    await state.update_data(button_text=None, button_url=None)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏
    await show_broadcast_preview(callback.message, state)
    
    await callback.answer()

async def show_broadcast_preview(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    data = await state.get_data()
    
    name = data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    text = data.get("text", "–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    photo = data.get("photo")
    button_text = data.get("button_text")
    button_url = data.get("button_url")
    
    # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–≤—ã–º
    await message.answer(
        f"üì± –¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{text}",
        parse_mode="HTML"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    preview_text = (
        "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üì± –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{text}\n\n"
    )
    
    if photo:
        preview_text += "üñº –§–æ—Ç–æ: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
    else:
        preview_text += "üñº –§–æ—Ç–æ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
    
    if button_text and button_url:
        preview_text += f"üîò –ö–Ω–æ–ø–∫–∞: {button_text} ({button_url})\n"
    else:
        preview_text += "üîò –ö–Ω–æ–ø–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    async with async_session() as session:
        total_users = await session.scalar(select(func.count()).select_from(User))
        preview_text += f"\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    kb = [
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_broadcast_now"),
            InlineKeyboardButton(text="‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_broadcast")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
    ]
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(BroadcastForm.waiting_for_confirmation)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–ª–±—ç–∫–∞—Ö
    preview_message = None
    if photo:
        try:
            preview_message = await message.answer_photo(
                photo,
                caption=preview_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
            )
        except Exception as e:
            logging.error(f"Error sending photo preview: {e}")
            preview_message = await message.answer(
                preview_text + "\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ—Ç–æ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
            )
    else:
        preview_message = await message.answer(
            preview_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–≤—å—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if preview_message:
        await state.update_data(preview_message_id=preview_message.message_id)

@router.callback_query(F.data == "send_broadcast_now")
async def send_broadcast_now(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await session.scalar(select(func.count()).select_from(User))
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        new_broadcast = Broadcast(
            name=data.get("name"),
            text=data.get("text"),
            photo=data.get("photo"),
            button_text=data.get("button_text"),
            button_url=data.get("button_url"),
            status="sending",
            total_users=total_users
        )
        
        session.add(new_broadcast)
        await session.commit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        asyncio.create_task(
            send_broadcast(
                callback.bot, 
                new_broadcast.id, 
                callback.from_user.id
            )
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    success_text = (
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
        "–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏'."
    )
    
    success_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="active_broadcasts")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_broadcasts")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
    await callback.message.answer(success_text, reply_markup=success_kb)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.answer()

@router.callback_query(F.data == "schedule_broadcast")
async def schedule_broadcast_date(callback: CallbackQuery, state: FSMContext):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    await state.set_state(BroadcastForm.waiting_for_schedule_date)
    
    try:
        await callback.message.edit_text(
            "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2025",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
            ])
        )
    except Exception as e:
        logging.error(f"Error editing message in schedule_broadcast_date: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2025",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
            ])
        )
    
    await callback.answer()

@router.message(BroadcastForm.waiting_for_schedule_date)
async def process_schedule_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        return
    
    date_str = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    date_pattern = re.compile(r"^\d{2}\.\d{2}\.\d{4}$")
    
    if not date_pattern.match(date_str):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2025\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    try:
        day, month, year = map(int, date_str.split('.'))
        schedule_date = datetime(year, month, day)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if schedule_date.date() < datetime.now().date():
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(schedule_date=schedule_date)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(BroadcastForm.waiting_for_schedule_time)
        
        await message.answer(
            "üïí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcasts")]
            ])
        )
    
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞—è –¥–∞—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏ —É–±–µ–¥–∏—Ç–µ—Å—å,\n"
            "—á—Ç–æ –¥–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )

@router.message(BroadcastForm.waiting_for_schedule_time)
async def process_schedule_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        return
    
    time_str = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    time_pattern = re.compile(r"^\d{1,2}:\d{2}$")
    
    if not time_pattern.match(time_str):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    try:
        hour, minute = map(int, time_str.split(':'))
        
        if hour < 0 or hour > 23 or minute < 0 or minute > 59:
            raise ValueError("Invalid time values")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        schedule_date = data.get("schedule_date")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
        schedule_datetime = schedule_date.replace(hour=hour, minute=minute)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if schedule_datetime < datetime.now():
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(schedule_datetime=schedule_datetime)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await save_scheduled_broadcast(message, state)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
            "–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )

async def save_scheduled_broadcast(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    data = await state.get_data()
    
    scheduled_time = data.get("schedule_datetime")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with async_session() as session:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await session.scalar(select(func.count()).select_from(User))
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        new_broadcast = Broadcast(
            name=data.get("name"),
            text=data.get("text"),
            photo=data.get("photo"),
            button_text=data.get("button_text"),
            button_url=data.get("button_url"),
            scheduled_at=scheduled_time,
            status="created",
            total_users=total_users
        )
        
        session.add(new_broadcast)
        await session.commit()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –µ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏'.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="active_broadcasts")],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_broadcasts")]
        ])
    )

async def send_broadcast(bot, broadcast_id: int, admin_id: int):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        broadcast_result = await session.execute(select(Broadcast).where(Broadcast.id == broadcast_id))
        broadcast = broadcast_result.scalar_one_or_none()
        
        if not broadcast:
            logging.error(f"Broadcast {broadcast_id} not found")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_result = await session.execute(select(User))
        users = users_result.scalars().all()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        broadcast.total_users = len(users)
        await session.commit()
        
        sent_count = 0
        errors_count = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user in users:
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                keyboard = None
                if broadcast.button_text and broadcast.button_url:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É —Å URL
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=broadcast.button_text, url=broadcast.button_url)]
                    ])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
                if broadcast.photo:
                    sent_msg = await bot.send_photo(
                        chat_id=user.telegram_id,
                        photo=broadcast.photo,
                        caption=broadcast.text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                else:
                    sent_msg = await bot.send_message(
                        chat_id=user.telegram_id,
                        text=broadcast.text,
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
                sent_count += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ
                recipient = BroadcastRecipient(
                    broadcast_id=broadcast.id,
                    user_id=user.id,
                    received=True,
                    received_at=datetime.now()
                )
                session.add(recipient)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if sent_count % 10 == 0:
                    broadcast.received_count = sent_count
                    await session.commit()
                
                # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                await asyncio.sleep(0.05)
                
            except Exception as e:
                logging.error(f"Error sending broadcast to user {user.telegram_id}: {e}")
                errors_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        broadcast.received_count = sent_count
        broadcast.status = "completed"
        broadcast.sent_at = datetime.now()
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=(
                    f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ '{broadcast.name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{broadcast.total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                    f"–û—à–∏–±–æ–∫: {errors_count}"
                ),
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="active_broadcasts")],
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_broadcasts")]
                ])
            )
        except Exception as e:
            logging.error(f"Error notifying admin about broadcast completion: {e}")

@router.callback_query(F.data == "active_broadcasts")
async def active_broadcasts(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        active_broadcasts_query = select(Broadcast).where(
            Broadcast.status.in_(["created", "sending"])
        ).order_by(desc(Broadcast.created_at))
        
        result = await session.execute(active_broadcasts_query)
        broadcasts = result.scalars().all()
        
        if not broadcasts:
            await callback.message.edit_text(
                "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
                "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_broadcast")],
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_broadcasts")]
                ])
            )
            await callback.answer()
            return
        
        text = "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        
        kb = []
        
        for i, broadcast in enumerate(broadcasts, 1):
            status_emoji = "üîÑ" if broadcast.status == "sending" else "‚è≥"
            
            text += f"{i}. {status_emoji} {broadcast.name}\n"
            
            if broadcast.scheduled_at:
                text += f"   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞: {broadcast.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
            
            if broadcast.status == "sending":
                text += f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {broadcast.received_count}/{broadcast.total_users}\n"
            
            text += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            kb.append([InlineKeyboardButton(
                text=f"{status_emoji} {broadcast.name}", 
                callback_data=f"broadcast_details_{broadcast.id}"
            )])
        
        kb.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_broadcasts")])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
        
        await callback.answer()

@router.callback_query(F.data.startswith("broadcast_details_"))
async def broadcast_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    broadcast_id = int(callback.data.split("_")[-1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        broadcast_result = await session.execute(select(Broadcast).where(Broadcast.id == broadcast_id))
        broadcast = broadcast_result.scalar_one_or_none()
        
        if not broadcast:
            await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        status_emoji = {
            "created": "‚è≥",
            "sending": "üîÑ",
            "completed": "‚úÖ",
            "failed": "‚ùå"
        }.get(broadcast.status, "‚ùì")
        
        status_text = {
            "created": "–°–æ–∑–¥–∞–Ω–∞",
            "sending": "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è",
            "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            "failed": "–û—à–∏–±–∫–∞"
        }.get(broadcast.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        text = (
            f"üìä –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ '{broadcast.name}'\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {broadcast.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        if broadcast.scheduled_at:
            text += f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞: {broadcast.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
            
        if broadcast.sent_at:
            text += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {broadcast.sent_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        text += f"\n–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {broadcast.received_count}/{broadcast.total_users}\n\n"
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø—Ä–µ–≤—å—é)
        text += "üì± –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞
        message_preview = broadcast.text
        if len(message_preview) > 100:
            message_preview = message_preview[:97] + "..."
            
        text += f"{message_preview}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–µ
        if broadcast.photo:
            text += "üñº –§–æ—Ç–æ: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ\n"
            
        if broadcast.button_text and broadcast.button_url:
            text += f"üîò –ö–Ω–æ–ø–∫–∞: {broadcast.button_text} ({broadcast.button_url})\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        kb = []
        
        # –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–π—á–∞—Å
        if broadcast.status == "created" and broadcast.scheduled_at:
            kb.append([InlineKeyboardButton(
                text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", 
                callback_data=f"broadcast_send_now_{broadcast.id}"
            )])
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        kb.append([InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", 
            callback_data=f"broadcast_delete_{broadcast.id}"
        )])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        kb.append([InlineKeyboardButton(text="üîô –ö –∞–∫—Ç–∏–≤–Ω—ã–º —Ä–∞—Å—Å—ã–ª–∫–∞–º", callback_data="active_broadcasts")])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
            )
        except Exception as e:
            logging.error(f"Error editing message in broadcast_details: {e}")
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            try:
                await callback.message.edit_text(
                    f"üìä –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ '{broadcast.name}'\n\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
                    f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {broadcast.received_count}/{broadcast.total_users}\n\n"
                    "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
                )
            except Exception as e2:
                logging.error(f"Error sending shortened message: {e2}")
                await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
        
        await callback.answer()

@router.callback_query(F.data.startswith("broadcast_send_now_"))
async def broadcast_send_now_scheduled(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    broadcast_id = int(callback.data.split("_")[-1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        broadcast_result = await session.execute(select(Broadcast).where(Broadcast.id == broadcast_id))
        broadcast = broadcast_result.scalar_one_or_none()
        
        if not broadcast:
            await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
        if broadcast.status != "created":
            await callback.answer("–≠—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return
        
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "sending"
        broadcast.status = "sending"
        await session.commit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏
        asyncio.create_task(
            send_broadcast(
                callback.bot, 
                broadcast.id, 
                callback.from_user.id
            )
        )
    
    await callback.message.edit_text(
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
        "–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.\n"
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏'.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="active_broadcasts")],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_broadcasts")]
        ])
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("broadcast_delete_"))
async def broadcast_delete(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    broadcast_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_broadcast_{broadcast_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"broadcast_details_{broadcast_id}")
            ]
        ])
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_broadcast_"))
async def confirm_delete_broadcast(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    broadcast_id = int(callback.data.split("_")[-1])
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        broadcast_result = await session.execute(select(Broadcast).where(Broadcast.id == broadcast_id))
        broadcast = broadcast_result.scalar_one_or_none()
        
        if not broadcast:
            await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        await session.execute(
            "DELETE FROM broadcast_recipients WHERE broadcast_id = :broadcast_id",
            {"broadcast_id": broadcast_id}
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É —Ä–∞—Å—Å—ã–ª–∫—É
        await session.delete(broadcast)
        await session.commit()
    
    await callback.message.edit_text(
        "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!\n\n"
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="active_broadcasts")],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_broadcasts")]
        ])
    )
    
    await callback.answer()

@router.callback_query(F.data == "broadcast_history")
async def broadcast_history(callback: CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        history_query = select(Broadcast).where(
            Broadcast.status.in_(["completed", "failed"])
        ).order_by(desc(Broadcast.sent_at)).limit(10)
        
        result = await session.execute(history_query)
        broadcasts = result.scalars().all()
        
        if not broadcasts:
            await callback.message.edit_text(
                "üìà –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫\n\n"
                "–í –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_broadcast")],
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_broadcasts")]
                ])
            )
            await callback.answer()
            return
        
        text = "üìà –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫:\n\n"
        
        kb = []
        
        for i, broadcast in enumerate(broadcasts, 1):
            status_emoji = "‚úÖ" if broadcast.status == "completed" else "‚ùå"
            
            text += (
                f"{i}. {status_emoji} {broadcast.name}\n"
                f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {broadcast.sent_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"   –ü–æ–ª—É—á–∏–ª–∏: {broadcast.received_count}/{broadcast.total_users}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            kb.append([InlineKeyboardButton(
                text=f"{status_emoji} {broadcast.name}", 
                callback_data=f"broadcast_details_{broadcast.id}"
            )])
        
        kb.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_broadcasts")])
        
        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
        )
        
        await callback.answer()

@router.callback_query(F.data.startswith("broadcast_stats_"))
async def broadcast_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    await broadcast_details(callback)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
async def check_scheduled_broadcasts(bot):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    while True:
        try:
            async with async_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
                now = datetime.now()
                scheduled_query = select(Broadcast).where(
                    and_(
                        Broadcast.status == "created",
                        Broadcast.scheduled_at <= now
                    )
                )
                
                result = await session.execute(scheduled_query)
                broadcasts = result.scalars().all()
                
                for broadcast in broadcasts:
                    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "sending"
                    broadcast.status = "sending"
                    await session.commit()
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    admin_id = int(os.getenv("ADMIN_ID", "5385155120"))
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                    asyncio.create_task(send_broadcast(bot, broadcast.id, admin_id))
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                    try:
                        await bot.send_message(
                            chat_id=admin_id,
                            text=f"üîî –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ '{broadcast.name}' –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫—É.",
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logging.error(f"Error notifying admin about scheduled broadcast: {e}")
        
        except Exception as e:
            logging.error(f"Error checking scheduled broadcasts: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        await asyncio.sleep(60)
        
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
def start_broadcast_scheduler(bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    asyncio.create_task(check_scheduled_broadcasts(bot)) 