from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import func, select, desc
from ..models.base import async_session
from ..models.models import User, Restaurant, MenuItem, Donation, Order
from datetime import datetime, timedelta
import os
import logging

router = Router()

# FSM –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserSearch(StatesGroup):
    waiting_for_query = State()

# –ê–¥–º–∏–Ω—Å–∫–∏–π ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.getenv("ADMIN_ID", "5385155120"))

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(telegram_id):
    return telegram_id == ADMIN_ID

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def get_admin_keyboard():
    kb = [
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üè† –†–µ—Å—Ç–æ—Ä–∞–Ω—ã", callback_data="admin_restaurants")
        ],
        [
            InlineKeyboardButton(text="üíò –ó–∞–∫–∞–∑—ã", callback_data="admin_orders"),
            InlineKeyboardButton(text="‚≠ê –î–æ–Ω–∞—Ç—ã", callback_data="admin_donations")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_broadcasts")
        ],
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.message(Command("admin"))
async def admin_command(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Love Restaurant\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(F.data == "admin_refresh")
async def admin_refresh(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    try:
        await callback.message.edit_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Love Restaurant\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_admin_keyboard()
        )
        await callback.answer("–ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å —Ç–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if "message is not modified" in str(e):
            await callback.answer("–ü–∞–Ω–µ–ª—å —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
        else:
            logging.error(f"Error refreshing admin panel: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")

@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await session.scalar(select(func.count()).select_from(User))
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        last_day = datetime.utcnow() - timedelta(days=1)
        active_users_query = select(func.count()).select_from(User).where(User.last_activity >= last_day)
        last_day_active = await session.scalar(active_users_query) or 0
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏
        restaurant_owners = await session.scalar(
            select(func.count()).select_from(User).where(User.is_restaurant_owner == True)
        )
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º
        connected_users = await session.scalar(
            select(func.count()).select_from(User).where(User.current_restaurant_id != None)
        )
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ 24 —á–∞—Å–∞
        new_users_query = select(func.count()).select_from(User).where(User.created_at >= last_day)
        last_registered = await session.scalar(new_users_query) or 0
        
        # –ü–æ–ª—É—á–∞–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        recent_users_query = select(User).order_by(desc(User.created_at)).limit(5)
        result = await session.execute(recent_users_query)
        recent_users = result.scalars().all()

        recent_users_text = ""
        for i, user in enumerate(recent_users, 1):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
                user_info = await callback.bot.get_chat(user.telegram_id)
                username = user_info.username or "–ù–µ—Ç username"
                fullname = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                user_display = f"{fullname}" + (f" (@{username})" if username != "–ù–µ—Ç username" else "")
                recent_users_text += f"{i}. {user_display}\n   üÜî ID: {user.telegram_id}, —Å–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            except Exception as e:
                logging.error(f"Failed to get user info: {e}")
                recent_users_text += f"{i}. ID: {user.telegram_id}, —Å–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        text = (
            "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {last_day_active}\n"
            f"–í–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {restaurant_owners}\n"
            f"–ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º: {connected_users}\n"
            f"–ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {last_registered}\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"{recent_users_text}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        kb = [
            [InlineKeyboardButton(text="üìë –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_all_users")],
            [InlineKeyboardButton(text="üì± –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        try:
            await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        except Exception as e:
            logging.error(f"Error editing message in admin_users: {e}")
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@router.callback_query(F.data == "admin_restaurants")
async def admin_restaurants(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    async with async_session() as session:
        total_restaurants = await session.scalar(select(func.count()).select_from(Restaurant))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        recent_restaurants_query = select(Restaurant, User).join(
            User, Restaurant.owner_id == User.id
        ).order_by(desc(Restaurant.created_at)).limit(5)
        
        result = await session.execute(recent_restaurants_query)
        recent_restaurants = result.all()
        
        # –ü–æ–¥—Å—á–µ—Ç –º–µ–Ω—é-–ø–æ–∑–∏—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        total_menu_items = await session.scalar(select(func.count()).select_from(MenuItem))
        
        text = (
            "üè† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:\n\n"
            f"–í—Å–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {total_restaurants}\n"
            f"–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ –º–µ–Ω—é: {total_menu_items}\n\n"
            "–ù–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã:\n"
        )
        
        if recent_restaurants:
            for i, (restaurant, owner) in enumerate(recent_restaurants, 1):
                menu_count = await session.scalar(
                    select(func.count()).select_from(MenuItem).where(
                        MenuItem.restaurant_id == restaurant.id
                    )
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∏–∑ Telegram
                try:
                    owner_info = await callback.bot.get_chat(owner.telegram_id)
                    username = owner_info.username or "–ù–µ—Ç username"
                    fullname = owner_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    owner_display = f"{fullname}" + (f" (@{username})" if username != "–ù–µ—Ç username" else "")
                except Exception as e:
                    logging.error(f"Failed to get owner info: {e}")
                    owner_display = f"ID: {owner.telegram_id}"
                
                text += (
                    f"{i}. '{restaurant.name}'\n"
                    f"   –í–ª–∞–¥–µ–ª–µ—Ü: {owner_display} (ID: {owner.telegram_id})\n"
                    f"   –°–æ–∑–¥–∞–Ω: {restaurant.created_at.strftime('%d.%m.%Y')}\n"
                    f"   –ü–æ–∑–∏—Ü–∏–π –≤ –º–µ–Ω—é: {menu_count}\n"
                )
        else:
            text += "–ù–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤\n"
        
        kb = [
            [InlineKeyboardButton(text="üìë –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", callback_data="admin_all_restaurants")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        try:
            await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        except Exception as e:
            logging.error(f"Error editing message in admin_restaurants: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@router.callback_query(F.data == "admin_orders")
async def admin_orders(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Order
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
            total_orders = await session.scalar(select(func.count()).select_from(Order))
            
            # –ó–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            last_day = datetime.utcnow() - timedelta(days=1)
            recent_orders = await session.scalar(
                select(func.count()).select_from(Order).where(
                    Order.created_at >= last_day
                )
            ) or 0
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏
            recent_orders_query = select(Order, User, Restaurant).join(
                User, Order.user_id == User.id
            ).join(
                Restaurant, Order.restaurant_id == Restaurant.id
            ).order_by(desc(Order.created_at)).limit(5)
            
            result = await session.execute(recent_orders_query)
            last_orders = result.all()
            
            text = (
                "üíò –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n\n"
                f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
                f"–ó–∞–∫–∞–∑–æ–≤ –∑–∞ 24 —á–∞—Å–∞: {recent_orders}\n\n"
                "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n"
            )
            
            if last_orders:
                for i, (order, user, restaurant) in enumerate(last_orders, 1):
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
                    try:
                        user_info = await callback.bot.get_chat(user.telegram_id)
                        username = user_info.username or "–ù–µ—Ç username"
                        fullname = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                        user_display = f"{fullname}" + (f" (@{username})" if username != "–ù–µ—Ç username" else "")
                    except Exception as e:
                        logging.error(f"Failed to get user info: {e}")
                        user_display = f"ID: {user.telegram_id}"
                    
                    text += (
                        f"{i}. –†–µ—Å—Ç–æ—Ä–∞–Ω: '{restaurant.name}'\n"
                        f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display} (ID: {user.telegram_id})\n"
                        f"   –°—É–º–º–∞: {order.total_kisses or 0} –ø–æ—Ü–µ–ª—É–µ–≤, {order.total_hugs or 0} –º–∏–Ω –æ–±–Ω–∏–º–∞—à–µ–∫\n"
                        f"   –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    )
            else:
                text += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
        except Exception as e:
            logging.error(f"Error querying orders: {e}")
            text = (
                "üíò –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n\n"
                "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "–ó–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫–∏.\n\n"
            )
        
        kb = [
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        try:
            await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        except Exception as e:
            logging.error(f"Error editing message in admin_orders: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@router.callback_query(F.data == "admin_donations")
async def admin_donations(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    async with async_session() as session:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤
        total_donations = await session.scalar(select(func.count()).select_from(Donation))
        total_amount = await session.scalar(select(func.sum(Donation.amount)).select_from(Donation)) or 0
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–Ω–∞—Ç—ã
        recent_donations_query = select(Donation, User).join(User).order_by(desc(Donation.created_at)).limit(5)
        result = await session.execute(recent_donations_query)
        recent_donations = result.all()
        
        text = (
            "‚≠ê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–Ω–∞—Ç–æ–≤:\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π: {total_donations}\n"
            f"–°—É–º–º–∞: {total_amount} –∑–≤–µ–∑–¥\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:\n"
        )
        
        for i, (donation, user) in enumerate(recent_donations, 1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
            try:
                user_info = await callback.bot.get_chat(user.telegram_id)
                username = user_info.username or "–ù–µ—Ç username"
                fullname = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                user_display = f"{fullname}" + (f" (@{username})" if username != "–ù–µ—Ç username" else "")
            except Exception as e:
                logging.error(f"Failed to get user info: {e}")
                user_display = f"ID: {user.telegram_id}"
                
            comment_text = donation.comment if donation.comment else "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
            donation_text = (
                f"{i}. {user_display} (ID: {user.telegram_id})\n"
                f"   –°—É–º–º–∞: {donation.amount} –∑–≤–µ–∑–¥\n"
                f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_text[:30]}\n"
                f"   –î–∞—Ç–∞: {donation.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )
            text += donation_text
        
        if not recent_donations:
            text += "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π\n"
        
        kb = [
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        try:
            await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        except Exception as e:
            logging.error(f"Error editing message in admin_donations: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    async with async_session() as session:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await session.scalar(select(func.count()).select_from(User))
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        last_day = datetime.utcnow() - timedelta(days=1)
        active_users_query = select(func.count()).select_from(User).where(User.last_activity >= last_day)
        last_day_active = await session.scalar(active_users_query) or 0
        
        # –†–µ—Å—Ç–æ—Ä–∞–Ω—ã
        total_restaurants = await session.scalar(select(func.count()).select_from(Restaurant))
        
        # –ü–æ–∑–∏—Ü–∏–∏ –≤ –º–µ–Ω—é
        total_menu_items = await session.scalar(select(func.count()).select_from(MenuItem))
        
        # –ó–∞–∫–∞–∑—ã
        total_orders = await session.scalar(select(func.count()).select_from(Order))
        
        # –î–æ–Ω–∞—Ç—ã
        total_donations = await session.scalar(select(func.count()).select_from(Donation))
        total_donation_amount = await session.scalar(select(func.sum(Donation.amount)).select_from(Donation)) or 0
        
        text = (
            "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {last_day_active}\n\n"
            f"üè† –í—Å–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {total_restaurants}\n"
            f"üçî –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ –º–µ–Ω—é: {total_menu_items}\n\n"
            f"üíò –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n\n"
            f"‚≠ê –í—Å–µ–≥–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π: {total_donations}\n"
            f"‚≠ê –ù–∞ —Å—É–º–º—É: {total_donation_amount} –∑–≤–µ–∑–¥\n"
        )
    
    kb = [
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    
    try:
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    except Exception as e:
        logging.error(f"Error editing message in admin_stats: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@router.callback_query(F.data == "admin_all_users")
async def admin_all_users(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –Ω–∞—á–Ω–µ–º —Å 1
    data = await state.get_data()
    page = data.get('users_page', 1)
    
    users_per_page = 10
    offset = (page - 1) * users_per_page
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await session.scalar(select(func.count()).select_from(User))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        users_query = select(User).order_by(desc(User.created_at)).offset(offset).limit(users_per_page)
        result = await session.execute(users_query)
        users = result.scalars().all()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (total_users + users_per_page - 1) // users_per_page
        
        text = f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):\n\n"
        
        for i, user in enumerate(users, offset + 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            status = []
            if user.is_restaurant_owner:
                status.append("–≤–ª–∞–¥–µ–ª–µ—Ü")
            if user.current_restaurant_id:
                status.append("–ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            status_text = ", ".join(status) if status else "–æ–±—ã—á–Ω—ã–π"
            last_activity = user.last_activity.strftime("%d.%m.%Y %H:%M") if user.last_activity else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
            try:
                user_info = await callback.bot.get_chat(user.telegram_id)
                username = user_info.username or "–ù–µ—Ç username"
                fullname = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                user_display = f"{fullname}" + (f" (@{username})" if username != "–ù–µ—Ç username" else "")
            except Exception as e:
                logging.error(f"Failed to get user info: {e}")
                user_display = f"ID: {user.telegram_id}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            user_info_text = (
                f"{i}. {user_display}\n"
                f"   üÜî ID: {user.telegram_id}\n"
                f"   üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            )
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª–µ—Ü —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
            if user.is_restaurant_owner:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                restaurant_query = select(Restaurant).where(Restaurant.owner_id == user.id)
                result = await session.execute(restaurant_query)
                restaurant = result.scalar_one_or_none()
                
                if restaurant:
                    user_info_text += f"   üç¥ –í–ª–∞–¥–µ–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º: '{restaurant.name}' (ID: {restaurant.id})\n"
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
            if user.current_restaurant_id:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                connected_query = select(Restaurant).where(Restaurant.id == user.current_restaurant_id)
                result = await session.execute(connected_query)
                connected_restaurant = result.scalar_one_or_none()
                
                if connected_restaurant:
                    user_info_text += f"   üîë –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É: '{connected_restaurant.name}' (ID: {connected_restaurant.id})\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            user_info_text += (
                f"   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}\n"
                f"   ‚è± –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
            )
            
            text += user_info_text
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        kb = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users_prev"))
        
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="admin_users_next"))
        
        if nav_buttons:
            kb.append(nav_buttons)
        
        kb.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(users_page=page)
        
        try:
            await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        except Exception as e:
            logging.error(f"Error editing message: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@router.callback_query(F.data == "admin_users_prev")
async def admin_users_prev_page(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    data = await state.get_data()
    current_page = data.get('users_page', 1)
    
    if current_page > 1:
        await state.update_data(users_page=current_page - 1)
        await admin_all_users(callback, state)
    else:
        await callback.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

@router.callback_query(F.data == "admin_users_next")
async def admin_users_next_page(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    data = await state.get_data()
    current_page = data.get('users_page', 1)
    
    async with async_session() as session:
        total_users = await session.scalar(select(func.count()).select_from(User))
        users_per_page = 10
        total_pages = (total_users + users_per_page - 1) // users_per_page
        
        if current_page < total_pages:
            await state.update_data(users_page=current_page + 1)
            await admin_all_users(callback, state)
        else:
            await callback.answer("–í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

@router.callback_query(F.data == "admin_all_restaurants")
async def admin_all_restaurants(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –Ω–∞—á–Ω–µ–º —Å 1
    data = await state.get_data()
    page = data.get('restaurants_page', 1)
    
    restaurants_per_page = 5
    offset = (page - 1) * restaurants_per_page
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        total_restaurants = await session.scalar(select(func.count()).select_from(Restaurant))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏
        restaurants_query = select(Restaurant, User).join(
            User, Restaurant.owner_id == User.id
        ).order_by(desc(Restaurant.created_at)).offset(offset).limit(restaurants_per_page)
        
        result = await session.execute(restaurants_query)
        restaurants_with_owners = result.all()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        total_pages = (total_restaurants + restaurants_per_page - 1) // restaurants_per_page
        
        text = f"üè† –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):\n\n"
        
        for i, (restaurant, owner) in enumerate(restaurants_with_owners, offset + 1):
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –º–µ–Ω—é
            menu_count = await session.scalar(
                select(func.count()).select_from(MenuItem).where(
                    MenuItem.restaurant_id == restaurant.id
                )
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∏–∑ Telegram
            try:
                owner_info = await callback.bot.get_chat(owner.telegram_id)
                username = owner_info.username or "–ù–µ—Ç username"
                fullname = owner_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                owner_display = f"{fullname}" + (f" (@{username})" if username != "–ù–µ—Ç username" else "")
            except Exception as e:
                logging.error(f"Failed to get owner info: {e}")
                owner_display = f"ID: {owner.telegram_id}"
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            clients_count = await session.scalar(
                select(func.count()).select_from(User).where(
                    User.current_restaurant_id == restaurant.id
                )
            )
            
            text += (
                f"{i}. '{restaurant.name}'\n"
                f"   üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_display}\n"
                f"   üÜî ID –≤–ª–∞–¥–µ–ª—å—Ü–∞: {owner.telegram_id}\n"
                f"   üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {restaurant.invite_code}\n"
                f"   üìã –ü–æ–∑–∏—Ü–∏–π –≤ –º–µ–Ω—é: {menu_count}\n"
                f"   üë• –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}\n"
                f"   üìÖ –°–æ–∑–¥–∞–Ω: {restaurant.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        if not restaurants_with_owners:
            text += "–ù–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤\n"
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        kb = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_restaurants_prev"))
        
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="admin_restaurants_next"))
        
        if nav_buttons:
            kb.append(nav_buttons)
        
        kb.append([InlineKeyboardButton(text="üîô –í –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤", callback_data="admin_restaurants")])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(restaurants_page=page)
        
        try:
            await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        except Exception as e:
            logging.error(f"Error editing message in admin_all_restaurants: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@router.callback_query(F.data == "admin_restaurants_prev")
async def admin_restaurants_prev_page(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    data = await state.get_data()
    current_page = data.get('restaurants_page', 1)
    
    if current_page > 1:
        await state.update_data(restaurants_page=current_page - 1)
        await admin_all_restaurants(callback, state)
    else:
        await callback.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

@router.callback_query(F.data == "admin_restaurants_next")
async def admin_restaurants_next_page(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    data = await state.get_data()
    current_page = data.get('restaurants_page', 1)
    
    async with async_session() as session:
        total_restaurants = await session.scalar(select(func.count()).select_from(Restaurant))
        restaurants_per_page = 5
        total_pages = (total_restaurants + restaurants_per_page - 1) // restaurants_per_page
        
        if current_page < total_pages:
            await state.update_data(restaurants_page=current_page + 1)
            await admin_all_restaurants(callback, state)
        else:
            await callback.answer("–í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
    async with async_session() as session:
        total_users = await session.scalar(select(func.count()).select_from(User))
        restaurant_owners = await session.scalar(
            select(func.count()).select_from(User).where(User.is_restaurant_owner == True)
        )
        total_restaurants = await session.scalar(select(func.count()).select_from(Restaurant))
    
    text = (
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–í–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {restaurant_owners}\n"
        f"–í—Å–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {total_restaurants}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )
    
    try:
        await callback.message.edit_text(text, reply_markup=get_admin_keyboard())
    except Exception as e:
        logging.error(f"Error editing message in admin_back: {e}")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(text, reply_markup=get_admin_keyboard())

@router.callback_query(F.data == "admin_search_user")
async def admin_search_user(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    await state.set_state(UserSearch.waiting_for_query)
    
    try:
        await callback.message.edit_text(
            "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–∏—Ñ—Ä—ã) –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ])
        )
    except Exception as e:
        logging.error(f"Error editing message in admin_search_user: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback.message.answer(
            "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–∏—Ñ—Ä—ã) –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ])
        )
    
    await callback.answer()

@router.message(UserSearch.waiting_for_query)
async def process_user_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        return
    
    search_query = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - ID –∏–ª–∏ username
    if search_query.isdigit():
        # –ü–æ–∏—Å–∫ –ø–æ ID
        user_tg_id = int(search_query)
        await find_user_by_telegram_id(message, user_tg_id, state)
    elif search_query.startswith('@'):
        # –ü–æ–∏—Å–∫ –ø–æ username
        username = search_query[1:]  # —É–±–∏—Ä–∞–µ–º @
        await find_user_by_username(message, username, state)
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞!\n"
            "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–∏—Ñ—Ä—ã) –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="admin_search_user")],
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")]
            ])
        )

async def find_user_by_telegram_id(message: Message, telegram_id: int, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        
        if user:
            await show_user_profile(message, user, state)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="admin_search_user")],
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")]
                ])
            )

async def find_user_by_username(message: Message, username: str, state: FSMContext):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    # –ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å username —á–µ—Ä–µ–∑ Telegram API
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.execute(select(User))
        users = result.scalars().all()
        
        found_user = None
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–∂–Ω—ã–º username
        for user in users:
            try:
                user_info = await message.bot.get_chat(user.telegram_id)
                if user_info.username and user_info.username.lower() == username.lower():
                    found_user = user
                    break
            except Exception as e:
                logging.error(f"Failed to get user info for {user.telegram_id}: {e}")
        
        if found_user:
            await show_user_profile(message, found_user, state)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="admin_search_user")],
                    [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")]
                ])
            )

async def show_user_profile(message: Message, user: User, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    async with async_session() as session:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = []
        if user.is_restaurant_owner:
            status.append("–≤–ª–∞–¥–µ–ª–µ—Ü —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            restaurant_query = select(Restaurant).where(Restaurant.owner_id == user.id)
            result = await session.execute(restaurant_query)
            restaurant = result.scalar_one_or_none()
            
            if restaurant:
                restaurant_info = f"üç¥ –†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant.name} (ID: {restaurant.id})\n" \
                                f"üìÖ –°–æ–∑–¥–∞–Ω: {restaurant.created_at.strftime('%d.%m.%Y %H:%M')}\n" \
                                f"üîë –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {restaurant.invite_code}\n"
                
                # –°—á–µ—Ç—á–∏–∫ –ø–æ–∑–∏—Ü–∏–π –≤ –º–µ–Ω—é
                menu_count_query = select(func.count()).select_from(MenuItem).where(MenuItem.restaurant_id == restaurant.id)
                menu_count = await session.scalar(menu_count_query) or 0
                restaurant_info += f"üìã –ü–æ–∑–∏—Ü–∏–π –≤ –º–µ–Ω—é: {menu_count}\n"
                
                # –°—á–µ—Ç—á–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
                clients_count_query = select(func.count()).select_from(User).where(User.current_restaurant_id == restaurant.id)
                clients_count = await session.scalar(clients_count_query) or 0
                restaurant_info += f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}\n"
            else:
                restaurant_info = "üç¥ –†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω)\n"
        else:
            restaurant_info = ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
        if user.current_restaurant_id:
            status.append("–∫–ª–∏–µ–Ω—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω
            connected_restaurant_query = select(Restaurant).where(Restaurant.id == user.current_restaurant_id)
            result = await session.execute(connected_restaurant_query)
            connected_restaurant = result.scalar_one_or_none()
            
            if connected_restaurant:
                connected_info = f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É: {connected_restaurant.name}\n"
            else:
                connected_info = "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É\n"
        else:
            connected_info = ""
            
        if not status:
            status.append("–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        status_text = ", ".join(status)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
        try:
            user_info = await message.bot.get_chat(user.telegram_id)
            username = user_info.username or "–ù–µ—Ç username"
            fullname = user_info.full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            user_display = f"{fullname}" + (f" (@{username})" if username != "–ù–µ—Ç username" else "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–æ—Ç–æ
            photos = await message.bot.get_user_profile_photos(user.telegram_id, limit=1)
            has_photo = photos.total_count > 0
        except Exception as e:
            logging.error(f"Failed to get user info: {e}")
            user_display = f"ID: {user.telegram_id}"
            has_photo = False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        last_activity = user.last_activity.strftime("%d.%m.%Y %H:%M") if user.last_activity else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_display}\n\n"
            f"üÜî Telegram ID: {user.telegram_id}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚è± –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if restaurant_info:
            text += f"üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ:\n{restaurant_info}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if connected_info:
            text += f"üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:\n{connected_info}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        kb = [
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="admin_search_user")],
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")]
        ]
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
        if has_photo:
            try:
                await message.answer_photo(
                    photos.photos[0][-1].file_id,
                    caption=text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
                )
            except Exception as e:
                logging.error(f"Failed to send photo: {e}")
                await message.answer(
                    text,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
                )
        else:
            await message.answer(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
            ) 