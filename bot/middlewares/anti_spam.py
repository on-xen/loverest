import time
from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery
import os
import logging

class AntiSpamMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞.
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏.
    """
    
    def __init__(self, rate_limit: int = 2, time_window: int = 2):
        """
        :param rate_limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
        :param time_window: –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.rate_limit = rate_limit
        self.time_window = time_window
        self.user_requests = {}  # user_id -> [timestamp1, timestamp2, ...]
        self.admin_id = int(os.getenv("ADMIN_ID", "5385155120"))
        self.spam_notifications = {}  # user_id -> last_notification_time
        self.notification_cooldown = 60  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        # –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–ø–∞–º–∞
        self.exempt_commands = ["/start", "/help", "/cancel"]
        logging.info(f"AntiSpamMiddleware initialized with rate_limit={rate_limit}, time_window={time_window}, exempt_commands={self.exempt_commands}")
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = None
        is_command = False
        exempt_command = False
        command_text = ""
        
        if isinstance(event, Message):
            user_id = event.from_user.id
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
            if event.text and event.text.startswith('/'):
                is_command = True
                command_text = event.text.split()[0].lower()  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–π
                if any(command_text == cmd for cmd in self.exempt_commands):
                    exempt_command = True
                    logging.info(f"Exempt command detected: {command_text} from user {user_id}")
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not user_id or user_id == self.admin_id or exempt_command:
            return await handler(event, data)
        
        current_time = time.time()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.user_requests:
            self.user_requests[user_id] = []
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.user_requests[user_id] = [
            timestamp for timestamp in self.user_requests[user_id]
            if current_time - timestamp < self.time_window
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç
        if len(self.user_requests[user_id]) >= self.rate_limit:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç, –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            if isinstance(event, Message):
                await event.answer("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            elif isinstance(event, CallbackQuery):
                await event.answer("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.", show_alert=True)
            
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø—è—Ç—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ä—è–¥ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if len(self.user_requests[user_id]) >= self.rate_limit * 2.5:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
                should_notify = True
                if user_id in self.spam_notifications:
                    if current_time - self.spam_notifications[user_id] < self.notification_cooldown:
                        should_notify = False
                
                if should_notify:
                    bot = data.get("bot")
                    if bot:
                        try:
                            username = event.from_user.username or "–ù–µ—Ç username"
                            full_name = event.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
                            event_type = "—Å–æ–æ–±—â–µ–Ω–∏–µ"
                            event_content = ""
                            if isinstance(event, Message):
                                event_type = "—Å–æ–æ–±—â–µ–Ω–∏–µ"
                                if is_command:
                                    event_type = "–∫–æ–º–∞–Ω–¥–∞"
                                event_content = f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {event.text}"
                            elif isinstance(event, CallbackQuery):
                                event_type = "–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏"
                                event_content = f"Callback: {event.data}"
                            
                            await bot.send_message(
                                self.admin_id,
                                f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–ø–∞–º!\n\n"
                                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (@{username})\n"
                                f"ID: {user_id}\n"
                                f"–¢–∏–ø: {event_type}\n"
                                f"{event_content}\n"
                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(self.user_requests[user_id])} –∑–∞ {self.time_window} —Å–µ–∫."
                            )
                            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            self.spam_notifications[user_id] = current_time
                            logging.info(f"Spam notification sent for user {user_id}")
                        except Exception as e:
                            logging.error(f"Failed to send spam notification: {e}")
            
            return None
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.user_requests[user_id].append(current_time)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        return await handler(event, data) 