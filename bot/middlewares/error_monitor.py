import os
import traceback
import logging
from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
import datetime

class ErrorMonitorMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫.
    –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    def __init__(self):
        self.admin_id = int(os.getenv("ADMIN_ID", "5385155120"))
        self.admin_username = os.getenv("ADMIN_USERNAME", "LoveRestaurantAdmin")
        self.last_error_time = {}  # error_hash -> last_notification_time
        self.error_cooldown = 300  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–π –∂–µ –æ—à–∏–±–∫–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
        # –°–ø–∏—Å–æ–∫ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫, –æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å
        self.non_critical_errors = [
            "message is not modified",
            "query is too old",
            "message to edit not found",
            "message to delete not found",
            "message can't be deleted",
            "bot was blocked by the user"
        ]
        logging.info(f"ErrorMonitorMiddleware initialized with admin_id={self.admin_id}")
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            return await handler(event, data)
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ–π
            error_message_lower = str(e).lower()
            is_non_critical = any(err in error_message_lower for err in self.non_critical_errors)
            
            # –î–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫, —Ç–∞–∫–∏—Ö –∫–∞–∫ "message is not modified", –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            if is_non_critical:
                logging.info(f"Non-critical error: {e}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ callback-–∑–∞–ø—Ä–æ—Å, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
                if isinstance(event, CallbackQuery):
                    if "message is not modified" in error_message_lower:
                        try:
                            await event.answer("–î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                        except Exception:
                            pass
                    else:
                        try:
                            await event.answer()
                        except Exception:
                            pass
                
                # –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –æ—à–∏–±–∫–∏
            tb = traceback.format_exc()
            error_hash = hash(str(e) + str(type(e)))
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logging.error(f"Uncaught exception: {e}\n{tb}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            error_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            error_message = f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!\n\n"
            error_message += f"–í—Ä–µ–º—è: {error_time}\n"
            error_message += f"–¢–∏–ø: {type(e).__name__}\n"
            error_message += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            user_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            if isinstance(event, Message) or isinstance(event, CallbackQuery):
                user = event.from_user
                user_info = f"{user.full_name} (@{user.username or '–Ω–µ—Ç'}, ID: {user.id})"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è
                if isinstance(event, Message):
                    if event.text:
                        error_message += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {event.text[:100]}\n"
                    elif event.caption:
                        error_message += f"–ü–æ–¥–ø–∏—Å—å: {event.caption[:100]}\n"
                elif isinstance(event, CallbackQuery):
                    error_message += f"Callback data: {event.data}\n"
            
            error_message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É)
            tb_short = tb.split("\n")[-10:] if len(tb.split("\n")) > 10 else tb.split("\n")
            error_message += "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n<code>" + "\n".join(tb_short) + "</code>"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∞–∫–æ–π –æ—à–∏–±–∫–µ –Ω–µ–¥–∞–≤–Ω–æ
            current_time = datetime.datetime.now().timestamp()
            should_notify = True
            
            if error_hash in self.last_error_time:
                if current_time - self.last_error_time[error_hash] < self.error_cooldown:
                    should_notify = False
            
            if should_notify:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                bot = data.get("bot")
                if bot:
                    try:
                        await bot.send_message(
                            self.admin_id,
                            error_message,
                            parse_mode="HTML"
                        )
                        self.last_error_time[error_hash] = current_time
                        logging.info(f"Error notification sent to admin: {error_hash}")
                    except Exception as notify_error:
                        logging.error(f"Failed to send error notification: {notify_error}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url=f"https://t.me/{self.admin_username}")]
            ])
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ
            if isinstance(event, Message):
                try:
                    await event.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        reply_markup=kb
                    )
                except Exception as user_notify_error:
                    logging.error(f"Failed to send error notification to user: {user_notify_error}")
            elif isinstance(event, CallbackQuery):
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback
                    await event.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                        show_alert=True
                    )
                    
                    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                    await event.message.answer(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        reply_markup=kb
                    )
                except Exception as user_notify_error:
                    logging.error(f"Failed to send error notification to user: {user_notify_error}")
            
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            raise 